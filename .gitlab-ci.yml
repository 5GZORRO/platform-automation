include:
  - template: Security/SAST-IaC.latest.gitlab-ci.yml

stages:
  - validate
  - test
  - build
  - deploy
  - cleanup

image: 
  name: registry.gitlab.com/gitlab-org/terraform-images/releases/terraform:1.2.6

variables:
  TF_ROOT: ${CI_PROJECT_DIR}/terraform
  TF_STATE_NAME: 5gzorro

cache:
  key: "${TF_ROOT}"
  paths:
    - ${TF_ROOT}/.terraform/

fmt:
  stage: validate
  script:
    - cd "${TF_ROOT}"
    - gitlab-terraform fmt -check
  allow_failure: true

validate:
  stage: validate
  script:
    - cd "${TF_ROOT}"
    - gitlab-terraform validate

build:
  stage: build
  script:
    - cd "${TF_ROOT}"
    - gitlab-terraform plan
    - gitlab-terraform plan-json
  resource_group: ${TF_STATE_NAME}
  artifacts:
    paths:
      - ${TF_ROOT}/plan.cache
    reports:
      terraform: ${TF_ROOT}/plan.json

deploy:
  stage: deploy
  script:
    - cd "${TF_ROOT}"
    - gitlab-terraform apply -auto-approve
  resource_group: ${TF_STATE_NAME}
  rules:
    - if: $DEPLOY == "true"

destroy:
  stage: cleanup
  script:
    - cd "${TF_ROOT}"
    - gitlab-terraform destroy -auto-approve
  resource_group: ${TF_STATE_NAME}
  rules:
    - if: $DESTROY == "true"

scale_down:
  stage: cleanup
  script:
    - cd "${TF_ROOT}"
    - gitlab-terraform destroy -auto-approve -target module.vms.azurerm_linux_virtual_machine.vm -target module.vms.azurerm_network_interface.nic -target module.vms.azurerm_network_interface_security_group_association.example -target module.vms.azurerm_network_security_group.nsg -target module.vms.azurerm_public_ip.publicip -target module.aks.azurerm_kubernetes_cluster_node_pool.k8s -target module.helm.helm_release.platform-5gzorro 
  resource_group: ${TF_STATE_NAME}
  rules:
    - if: $SCALE_DOWN == "true"