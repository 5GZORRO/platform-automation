# This template will install all 5GZORRO base components plus 4 operator with different role (admin, regulator, trader, consumer)
# -- Tags can be used to disable/enable specific profiles (check in the Chart.yaml to see tags -> component mapping)
tags:
  # -- Enable all compontens in basic profile 
  base: true
  # -- Enable all compontens in admin profile
  admin: true 
  # -- Enable all compontens in trader profile
  trader: true
  # -- Enable all compontens in consumer profile
  consumer: true
  # -- Enable all compontens in regulator profile
  regulator: true
  # -- Enable monitoring profile
  monitoring: true

global:
  imagePullSecrets: 
    # -- Name of the registry credentials secrets manually created
    - name: registry-credentials
  imageCredentials:
    # -- URL of the repository where all the images are stored
    registry: ${REGISTRY_URL}
    # -- Username
    username: ${REGISTRY_USERNAME}
    # -- Password
    password: ${REGISTRY_PASSWORD}
  # -- Image used by some jobs
  miscTools:
    image:
      # -- Docker image repository
      repository: ghcr.io/5gzorro/platform-automation/misc-tools
      # -- Image pull policy
      pullPolicy: IfNotPresent
      # -- Docker image tag
      # Overrides the image tag whose default is the chart appVersion.
      tag: "latest"
  singleOperator:
    enabled: false
    doormanCertificate: "yaml/platform-5gzorro/ambassador-doorman.crt"
    networkmapCertificate: "yaml/platform-5gzorro/ambassador-networkmap.crt"

######################## START Base Profile Block ########################
ingress-nginx:
  # -- Enable ingress-nginx controller. See [ingress-nginx](https://github.com/kubernetes/ingress-nginx/tree/main/charts/ingress-nginx) documentation for more datails.
  enabled: true
  # -- Set it with your domain
  controller:
    service:
      annotations:
        external-dns.alpha.kubernetes.io/hostname: "*.${HOSTED_ZONE_NAME}"

cert-manager: 
  # -- Enable cert-manager operator. See [cert-manager](https://cert-manager.io/docs/installation/helm/) documentation for more datails.
  enabled: true
  # -- Namespace name where cert-manager will be installed.
  namespace: cert-manager

rabbitmq-cluster-operator:
  # -- Enable rabbitmq operator. See [rabbitmq-cluster-operator](https://github.com/bitnami/charts/tree/main/bitnami/rabbitmq-cluster-operator) documentation for more datails.
  enabled: true


cordaBevel:
  # -- Deploy corda network using hyperledger bevel
  enabled: true
  git:
    # -- Git Repo details which will be used by GitOps/Flux. Gitops https or ssh url for flux value files 
    url: "${BEVEL_GIT_URL}"
    # -- Gitops git repository URL for git push 
    repo_url: "${BEVEL_REPO_URL}"
    # -- Git Service user who has rights to check-in in all branches
    username: "${BEVEL_REPO_USERNAME}"
    # -- Git Server user password/token (Optional for ssh; Required for https)
    password: "${BEVEL_REPO_PASSWORD}"
    # -- Email to use in git config
    email: "${BEVEL_REPO_EMAIL}"
    # -- Git branch
    branch: develop
  url_suffix: "${BEVEL_URL_SUFFIX}"
  vault:
    # -- Hashicorp Vault server address and root-token. Vault should be unsealed.
    url: http://vault.${HOSTED_ZONE_NAME}:8200
    # --  Hashicorp Vault root-token. Vault should be unsealed.
    root_token: root
  k8s:
    # -- Kubernetes context
    context: 5gzorro

custom-resource-5gzorro:
  # -- Enable 5GZORRO custom resource like rabbitmq, mongodb and postgresSQL clusters.
  enabled: true
  rabbitmq-cluster-operator:
    # -- Enable custom resource for rabbitmq-cluster
    enabled: true
    # -- RabbitMQ cluster configurations 
    rabbitmqClusters:
      - name: rabbitmq-elma-admin
        replicas: 1
      - name: rabbitmq-elma-regulator
        replicas: 1
      - name: rabbitmq-elma-trader
        replicas: 1
      - name: rabbitmq-elma-consumer
        replicas: 1
  certmanager:
    # -- email address used for notifications about certificate status
    email: ""
    zerossl:
      # -- Enable zerossl certficate provider account is needed.
      enabled: true
      # -- EABK ID available in zeroSSL developer console 
      eabKid: ${EAB_KID} 
      eabHmac:
        # -- HMAC secrets name 
        secretName: "zerossl-eabsecret"
        # -- HMAC secrets name 
        secretKey: "secret"
    letsencrypt:
      # -- Enable letsencrypt certificate provider
      enabled: false
    # -- Azure DNS configurations 
    azureDns:
      subscriptionID: ${SUBSCRIPTION_ID} 
      resourceGroupName: ${RESOURCE_GROUP_NAME} 
      hostedZoneName: ${HOSTED_ZONE_NAME} 
      clientID: ${MANAGEND_IDENTITY_CLIENT_ID} 
  kube-prometheus-stack:
    # -- Enable prometues to scrape some custom metrics
    enabled: true
  community-operator:
    # -- Enable MongoDB custom resource
    enabled: true
    community-operator-crds:
      enabled: false
    # -- MongoDB clusters list
    # @notationType -- list
    mongodbClusters:
      # -- MongoDB clusters configurations example
      - name: mongodb-admin
        replicas: 1
        version: "4.2.6"
        users:
          - name: idp-admin
            db: admin
            passwordSecretRef: 
              name: 5gzorro-mongodb-idp-admin-password
            roles:
              - name: readWrite
                db: administrator
              - name: readWrite
                db: provider
            scramCredentialsSecretName: 5gzorro-mongodb-idp-admin-scram
          - name: srsd
            db: admin
            passwordSecretRef: 
              name: 5gzorro-mongodb-srsd-admin-password
            roles:
              - name: readWrite
                db: srsd
            scramCredentialsSecretName: 5gzorro-mongodb-srsd-admin-scram
      - name: mongodb-trader
        replicas: 1
        version: "4.2.6"
        users:
          - name: idp-trader
            db: admin
            passwordSecretRef: 
              name: 5gzorro-mongodb-idp-trader-password
            roles:
              - name: readWrite
                db: provider
            scramCredentialsSecretName: 5gzorro-mongodb-idp-trader-scram
          - name: srsd
            db: admin
            passwordSecretRef: 
              name: 5gzorro-mongodb-srsd-trader-password
            roles:
              - name: readWrite
                db: srsd
            scramCredentialsSecretName: 5gzorro-mongodb-srsd-trader-scram
      - name: mongodb-regulator
        replicas: 1
        version: "4.2.6"
        users:
          - name: idp-regulator
            db: admin
            passwordSecretRef: 
              name: 5gzorro-mongodb-idp-regulator-password
            roles:
              - name: readWrite
                db: regulator
              - name: readWrite
                db: provider
            scramCredentialsSecretName: 5gzorro-mongodb-idp-regulator-scram
          - name: srsd
            db: admin
            passwordSecretRef: 
              name: 5gzorro-mongodb-srsd-regulator-password
            roles:
              - name: readWrite
                db: srsd
            scramCredentialsSecretName: 5gzorro-mongodb-srsd-regulator-scram   
      - name: mongodb-consumer
        replicas: 1
        version: "4.2.6"
        users:
          - name: idp-consumer
            db: admin
            passwordSecretRef: 
              name: 5gzorro-mongodb-idp-consumer-password
            roles:
              - name: readWrite
                db: provider
            scramCredentialsSecretName: 5gzorro-mongodb-idp-consumer-scram
          - name: srsd
            db: admin
            passwordSecretRef: 
              name: 5gzorro-mongodb-srsd-consumer-password
            roles:
              - name: readWrite
                db: srsd
            scramCredentialsSecretName: 5gzorro-mongodb-srsd-consumer-scram 
  strimzi:
    # -- Enable kafka custom resource
    enabled: true
    # -- kafka clusters list
    # @notationType -- list
    kafkaClusters:
      # -- Kafka clusters configurations example
      - name: kafka-cluster
        replicas: 3
        version: 3.2.0
        config:
          offsets.topic.replication.factor: 3
          transaction.state.log.replication.factor: 3
          transaction.state.log.min.isr: 2
          default.replication.factor: 3
          min.insync.replicas: 1
          inter.broker.protocol.version: "3.2"
        storage:
          type: jbod
          volumes:
          - id: 0
            type: persistent-claim
            size: 32Gi
            deleteClaim: false
          - id: 1
            type: persistent-claim
            size: 32Gi
            deleteClaim: false
        zookeeper:
          replicas: 3
          storage:
            type: persistent-claim
            size: 32Gi
    # -- kafka topic list
    # @notationType -- list
    kafkaTopics:
      # -- Kafka topic configurations example
      - name: dlt-product-offerings
        clusterName: kafka-cluster
        spec:
          partitions: 3
          replicas: 1
      - name: dlt-product-order
        clusterName: kafka-cluster
        spec:
          partitions: 3
          replicas: 1
  postgres-operator:
    # -- Enable PostgresSQL custom resource
    enabled: true
    # -- PostgresSQL clusters list
    # @notationType -- list
    postgresqlClusters:
      # -- PostgresSQL clusters configurations example
      - name: zorro5g-psqldb-admin
        spec:
          teamId: zorro5g
          volume:
            size: 256Gi
            storageClass: "managed-premium"
          numberOfInstances: 1
          users:
            nssoadmin:
              - superuser
              - createdb
            sclmadmin:
              - superuser
              - createdb
            xrmcatalogueappadmin:
              - superuser
              - createdb
            xrmtranslatoradmin:
              - superuser
              - createdb
            mdaadmin:
              - superuser
              - createdb
            legalproseadmin:
              - superuser
              - createdb
            governancemanageradmin:
              - superuser
              - createdb
            rsocadmin:
              - superuser
              - createdb
          databases:
            nssoadmin: nssoadmin
            sclmadmin: sclmadmin
            xrmcatalogueappadmin: xrmcatalogueappadmin
            xrmtranslatoradmin: xrmtranslatoradmin
            mdaadmin: mdaadmin
            legalproseadmin: legalproseadmin
            governancemanageradmin: governancemanageradmin
            rsocadmin: rsocadmin
          postgresql:
            version: "14"
      - name: zorro5g-psqldb-datalake
        spec:
          teamId: zorro5g
          volume:
            size: 16Gi
            storageClass: "managed-premium"
          numberOfInstances: 1
          users:
            datalake:
              - superuser
              - createdb
          databases:
            datalake: datalake
          postgresql:
            version: "14"
      - name: zorro5g-psqldb-regulator
        spec:
          teamId: zorro5g
          volume:
            size: 256Gi
            storageClass: "managed-premium"
          numberOfInstances: 1
          users:
            sclmregulator:
              - superuser
              - createdb
            xrmcatalogueappregulator:
              - superuser
              - createdb
            xrmtranslatorregulator:
              - superuser
              - createdb
            mdaregulator:
              - superuser
              - createdb
            legalproseregulator:
              - superuser
              - createdb
            governancemanagerregulator:
              - superuser
              - createdb
            rsocregulator:
              - superuser
              - createdb
          databases:
            sclmregulator: sclmregulator
            xrmcatalogueappregulator: xrmcatalogueappregulator
            xrmtranslatorregulator: xrmtranslatorregulator
            mdaregulator: mdaregulator
            legalproseregulator: legalproseregulator
            governancemanagerregulator: governancemanagerregulator
            rsocregulator: rsocregulator
          postgresql:
            version: "14"
      - name: zorro5g-psqldb-consumer
        spec:
          teamId: zorro5g
          volume:
            size: 256Gi
            storageClass: "managed-premium"
          numberOfInstances: 1
          users:
            sclmconsumer:
              - superuser
              - createdb
            xrmcatalogueappconsumer:
              - superuser
              - createdb
            legalproseconsumer:
              - superuser
              - createdb
            xrmtranslatorconsumer:
              - superuser
              - createdb
            mdaconsumer:
              - superuser
              - createdb
            rsocconsumer:
              - superuser
              - createdb
          databases:
            sclmconsumer: sclmconsumer
            xrmcatalogueappconsumer: xrmcatalogueappconsumer
            xrmtranslatorconsumer: xrmtranslatorconsumer
            legalproseconsumer: legalproseconsumer
            mdaconsumer: mdaconsumer
            rsocconsumer: rsocconsumer
          postgresql:
            version: "14"
      - name: zorro5g-psqldb-trader
        spec:
          teamId: zorro5g
          volume:
            size: 16Gi
            storageClass: "managed-premium"
          numberOfInstances: 1
          users:
            sclmtrader:
              - superuser
              - createdb
            nssotrader:
              - superuser
              - createdb
            xrmcatalogueapptrader:
              - superuser
              - createdb
            xrmtranslatortrader:
              - superuser
              - createdb
            legalprosetrader:
              - superuser
              - createdb
            mdatrader:
              - superuser
              - createdb
            rsoctrader:
              - superuser
              - createdb
          databases:
            sclmtrader: sclmtrader
            nssotrader: nssotrader
            xrmcatalogueapptrader: xrmcatalogueapptrader
            xrmtranslatortrader: xrmtranslatortrader
            legalprosetrader: legalprosetrader
            mdatrader: mdatrader
            rsoctrader: rsoctrader
          postgresql:
            version: "14"

external-dns:
  # -- Enable external-dns controller. See [external-dns](https://github.com/kubernetes-sigs/external-dns/tree/master/charts/external-dns) documentation for more datails.
  enabled: true
  # -- Select DNS provider
  provider: azure
  # -- Azure provider configuration
  azure:
    resourceGroup: ${RESOURCE_GROUP_NAME} 
    tenantId: ${AZURE_TENANT_ID}
    subscriptionId: ${SUBSCRIPTION_ID} 
    useManagedIdentityExtension: true
  txtOwnerId: "external-dns"
  # -- Set this filter according to your dns configuration
  domainFilters: ["${HOSTED_ZONE_NAME}"]

kube-prometheus-stack:
  # -- Enable kube-prometheus-stack. See [kube-prometheus-stack](https://github.com/prometheus-community/helm-charts/tree/main/charts/kube-prometheus-stack) documentation for more datails.
  enabled: true
  # @ignored
  defaultRules:
    etcd: false
    kubeScheduler: false
  # @ignored
  grafana:
    defaultDashboardsTimezone: Europe/Rome
    adminPassword: 5gzorro-metrics
  # @ignored
  kubeControllerManager:
    enabled: false
  # @ignored
  kubeEtcd:
    enabled: false
  # @ignored
  kubeScheduler:
    enabled: false
  # prometheusOperator:
  #   logLevel: debug
  # @ignored
  prometheus:
    prometheusSpec:
      serviceMonitorSelectorNilUsesHelmValues: false
      ruleSelectorNilUsesHelmValues: false
      podMonitorSelectorNilUsesHelmValues: false
      probeSelectorNilUsesHelmValues: false
      retention: 180d
      retentionSize: "30GB"
      storageSpec:
        volumeClaimTemplate:
          spec:
            storageClassName: managed-premium
            accessModes: ["ReadWriteOnce"]
            resources:
              requests:
                storage: 32Gi

loki-stack:
  # -- Enable loki-stack. See [loki-stack](https://github.com/grafana/helm-charts/tree/main/charts/loki-stack) documentation for more datails.
  enabled: true
  # @ignored
  loki:
    enabled: true
    isDefault: true
    persistence:
      enabled: true
      accessModes:
      - ReadWriteOnce
      size: 32Gi
      annotations: {}
      subPath: "loki"
      storageClassName: managed-premium
    serviceMonitor:
      enabled: true
      prometheusRule:
        enabled: true
        rules: 
        #  Some examples from https://awesome-prometheus-alerts.grep.to/rules.html#loki
        - alert: LokiProcessTooManyRestarts
          expr: changes(process_start_time_seconds{job=~"loki"}[15m]) > 2
          for: 0m
          labels:
            severity: warning
          annotations:
            summary: Loki process too many restarts (instance {{ $labels.instance }})
            description: "A loki process had too many restarts (target {{ $labels.instance }})\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
        - alert: LokiRequestErrors
          expr: 100 * sum(rate(loki_request_duration_seconds_count{status_code=~"5.."}[1m])) by (namespace, job, route) / sum(rate(loki_request_duration_seconds_count[1m])) by (namespace, job, route) > 10
          for: 15m
          labels:
            severity: critical
          annotations:
            summary: Loki request errors (instance {{ $labels.instance }})
            description: "The {{ $labels.job }} and {{ $labels.route }} are experiencing errors\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
        - alert: LokiRequestPanic
          expr: sum(increase(loki_panic_total[10m])) by (namespace, job) > 0
          for: 5m
          labels:
            severity: critical
          annotations:
            summary: Loki request panic (instance {{ $labels.instance }})
            description: "The {{ $labels.job }} is experiencing {{ printf \"%.2f\" $value }}% increase of panics\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
        - alert: LokiRequestLatency
          expr: (histogram_quantile(0.99, sum(rate(loki_request_duration_seconds_bucket{route!~"(?i).*tail.*"}[5m])) by (le)))  > 1
          for: 5m
          labels:
            severity: critical
          annotations:
            summary: Loki request latency (instance {{ $labels.instance }})
            description: "The {{ $labels.job }} {{ $labels.route }} is experiencing {{ printf \"%.2f\" $value }}s 99th percentile latency\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
  # @ignored
  promtail:
    enabled: true
    config:
      lokiAddress: http://{{ .Release.Name }}-loki:3100/loki/api/v1/push
    serviceMonitor:
      enabled: true

minio:
# -- Enable minio. See [minio](https://github.com/minio/operator/tree/master/helm/operator) documentation for more datails.
  enabled: true
   # @ignored
  fullnameOverride: "minio"
   # @ignored
  mode: standalone
   # @ignored
  replicas: 1
   # @ignored
  DeploymentUpdate:
    type: Recreate
  # @ignored
  resources:
    requests:
      memory: 2Gi
  # @ignored
  persistence:
    enabled: true
    storageClass: ""
    accessModes: "ReadWriteOnce"
    size: 32Gi
  # @ignored
  ingress:
    enabled: true
    ingressClassName: "nginx"
    annotations:
      helm.sh/resource-policy: keep
    path: /
    hosts:
      - minio.${HOSTED_ZONE_NAME}
    tls:
     - secretName: 5gzorro-wildcard-cert
       hosts:
         - minio.${HOSTED_ZONE_NAME}
  # @ignored
  metrics:
    serviceMonitor:
      enabled: true
  # @ignored
  users:
    - accessKey: zorro5g
      secretKey: zorro5g2022
      policy: consoleAdmin
    - accessKey: datalake
      secretKey: datalake2022
      policy: datalakereadwrite
  # @ignored
  buckets:
    - name: datalake
      policy: none
      purge: false
      versioning: false
      objectlocking: false
  # @ignored
  policies:
    - name: datalakereadwrite
      statements:
        - resources:
            - 'arn:aws:s3:::datalake/*'
          actions:
            - "s3:AbortMultipartUpload"
            - "s3:GetObject"
            - "s3:DeleteObject"
            - "s3:PutObject"
            - "s3:ListMultipartUploadParts"

postgres-operator:
  # -- Enable postgres-operator. See [postgres-operator](https://github.com/zalando/postgres-operator) documentation for more datails.
  enabled: true

strimzi:
  # -- Enable Kafka Strimzi Operator. See [kafka-strimzi](https://github.com/strimzi/strimzi-kafka-operator) documentation for more datails.
  enabled: true
  # -- Watch for CR in all namespaces
  watchAnyNamespace: true
          
community-operator:
  # -- Enable MongoDB Community Operator. See [mongodb-community](https://github.com/mongodb/mongodb-kubernetes-operator) documentation for more datails.
  enabled: true
  community-operator-crds:
  # -- Disable CRD creation that can cause problems with umbrella charts
    enabled: false

argo-workflows:
  # -- Enable Argo Workflow. See [argo-workflows](https://github.com/argoproj/argo-helm/tree/main/charts/argo-workflows) documentation for more datails.
  enabled: true
  crds:
    # -- Disable CRD creation that can cause problems with umbrella charts
    install: false
  # @ignored
  controller:
    metricsConfig:
      enabled: true
    telemetryConfig:
      enabled: true
    serviceMonitor:
      enabled: true
  # @ignored
  server:
    extraArgs: 
      - --auth-mode=server
    ingress:
      enabled: true
      ingressClassName: "nginx"
      annotations: 
        helm.sh/resource-policy: keep
      hosts:
        - argo.${HOSTED_ZONE_NAME}
      paths:
        - /
      pathType: Prefix
      tls: 
        - secretName: 5gzorro-wildcard-cert
          hosts:
            - argo.${HOSTED_ZONE_NAME}

argo-events:
  # -- Enable Argo Events. See [argo-events](https://github.com/argoproj/argo-helm/tree/main/charts/argo-events) documentation for more datails.
  enabled: true
  crds:
    # -- Disable CRD creation that can cause problems with umbrella charts
    install: false

vault:
  enabled: true
  ui:
    enabled: true
    serviceType: "LoadBalancer"
    serviceNodePort: null
    externalPort: 8200
    annotations: 
      external-dns.alpha.kubernetes.io/hostname: 'vault.${HOSTED_ZONE_NAME}'
  server:
    standalone:
      enabled: true
    extraArgs: "-dev-kv-v1"
    dev:
      enabled: true
      devRootToken: "root"
    # ingress:
    #   enabled: true
    #   ingressClassName: "nginx"
    #   pathType: Prefix
    #   activeService: true
    #   hosts:
    #     - host: 'vault.5gzorro.smartcommunitylab.it'
    #       paths: 
    #         - path: /
    #           pathType: Prefix
    #   tls:
    #     - secretName: 5gzorro-wildcard-cert #admin-idp-letsencrypt-tls
    #       hosts:
    #         - vault.5gzorro.smartcommunitylab.it'
  injector:
    enabled: false
######################## END Base Profile Block ########################
######################## START Admin Profile Block ########################
datalake:
  # -- Enable 5GZORRO datalake 
  enabled: true
  image:
    # -- Docker image repository
    repository: ghcr.io/5gzorro/platform-automation/datalake
    # -- Docker image tag
    # Overrides the image tag whose default is the chart appVersion.
    tag: "fix-psql1"
    # -- Image pull policy
    pullPolicy: IfNotPresent
  # -- Namespace name where datalake will be deployed 
  namespace: default
  postgres:
    # -- PostgreSQL hostname (service name if it's in the same namespace, FQDN if NOT)
    host: "zorro5g-psqldb-datalake"
    # -- PostgreSQL port
    port: 5432
    # -- PostgreSQL database name
    name: "datalake"
    # -- PostgreSQL table name
    table: "datalake_metrics"
    # -- PostgreSQL secrets name (created manually or by custom-resource-5gzorro helm-chart, containing user credentials)
    existingSecret: "datalake.zorro5g-psqldb-datalake.credentials.postgresql.acid.zalan.do"
    # -- PostgreSQL secret username key
    userKey: "username"
    # -- PostgreSQL secret password key
    passwordKey: "password"
  kafka:
    # -- Kafka hostname (service name if it's in the same namespace, FQDN if NOT)
    host: "kafka-cluster-kafka-bootstrap"
    # -- Kafka port
    port: "9092"
  minio:
    # -- Minio hostname (service name if it's in the same namespace, FQDN if NOT)
    host: "minio"
    # -- Minio port
    port: "8080"
    # -- Minio username
    username: "datalake"
    # -- Minio password
    password: "datalake2022"
    # -- Minio secrets name (created manually or by custom-resource-5gzorro helm-chart, containing user credentials)
    existingSecret: ""
    # -- Minio secret username key
    userKey: ""
    # -- Minio secret password key
    passwordKey: ""
  datalake:
    # -- Datalake Docker image tag
    imageVersion: "latest"
    # -- Datalake docker image repository
    imageRepository: "ghcr.io/5gzorro/platform-automation"

sla-breach-predictor:
  # -- Enable 5GZORRO SLA Breach Predictor
  enabled: true
  isbp:
    image:
      # -- Docker image repository
      repository: ghcr.io/5gzorro/platform-automation/isbp
      # -- Image pull policy
      pullPolicy: IfNotPresent
      # -- Docker image tag
      # Overrides the image tag whose default is the chart appVersion.
      tag: "latest"
  predictor:
    image:
      # -- Docker image repository
      repository: ghcr.io/5gzorro/platform-automation/isbp-predictor
      # -- Image pull policy
      pullPolicy: IfNotPresent
      # -- Docker image tag
      # Overrides the image tag whose default is the chart appVersion.
      tag: "latest"
  persistence:
    # -- Enable persistence
    enabled: true
    # -- StorageClassName
    storageClassName: "azurefile"
    # -- Persistent Volume Claim size
    size: 128Gi
  kafka:
    # -- Kafka hostname (service name if it's in the same namespace, FQDN if NOT)
    host: kafka-cluster-kafka-bootstrap
    # -- Kafka port
    port: 9092
    # -- Kafka monitoring Topic
    monTopic: ""
  # -- Datalake hostname and port (service name if it's in the same namespace, FQDN if NOT)
  datalakeHost: zorro5g-datalake:8080
  # -- Smart Contract Lifecycle Manager hostname and port (service name if it's in the same namespace, FQDN if NOT)
  lcmHost: smart-contract-lifecycle-manager-admin:8087

elma-admin:
  # -- Enable 5GZORRO e-License Manager
  enabled: true
  image:
    # -- Docker image tag
    tag: gitlab-ci
    app: elma
    # -- Docker image repository
    image: ghcr.io/5gzorro/platform-automation/elma
    # -- Image pull policy
    pullPolicy: Always
  # -- Define component role/profile
  role: admin
  # -- e-License Manager domainID
  domainId: "admin"
  catalog:
    # -- URL of the Resource and Service Offer Catalog instance specific for this profile
    url: "zorro5g-resource-and-service-offer-catalog-admin"
    # -- Port of the Resource and Service Offer Catalog instance specific for this profile
    port: "8080"
    resources: "None"
  netSlice:
    # -- Slice Manager API URL
    url: "172.28.3.15"
    # -- Slice Manager API Port
    port: "31082"
    # -- Slice Manager API endpoint
    endpoint: "portal/elicensing/"
  datalake:
    # -- Datalake URL
    url: "http://zorro5g-datalake:8080/datalake/v1/catalog/instance/{instance_id}"
    # -- Datalake Auth
    auth: '{"userInfo": {"userId": "operator-a", "authToken": "blah"}}'
    # -- Kafka URL
    kafka: "kafka-cluster-kafka-bootstrap:9092"
  rabbitmq:
    # -- URL of the RabbitMQ instance specific for this profile
    url: "rabbitmq-elma-admin"
    # -- RabbitMQ secrets name (created manually or by custom-resource-5gzorro helm-chart, containing user credentials)
    existingSecret: "rabbitmq-elma-admin-default-user"
    # -- RabbitMQ secret username key
    userKey: "username"
    # -- RabbitMQ secret password key
    passwordKey: "password"

aries-cloudagent-admin:
  # -- Enable Aries Cloud Agent 
  enabled: true
  image:
    # -- Docker image repository
    repository: ghcr.io/5gzorro/platform-automation/aries-cloudagent
    # -- Image pull policy
    pullPolicy: IfNotPresent
    # -- Docker image tag
    # Overrides the image tag whose default is the chart appVersion.
    tag: "0.6.0"
  agent:
    # -- Define component role/profile
    role: "admin"  # Admin, Regulator, Holder, Verifier
    # -- Define agent label 
    label: "AgentAdmin" # AgentRegulator
    # -- Define agent seed
    seed: "AgentAdmin0000000000000000000000" # AgentRegulator00000000000000000
    # -- Define agent did
    did: "RGQ8DpoASL9rZZp69i7wJ8"
    # -- Define agent wallet name 
    walletName: "AgentAdmin" # AgentRegulator
    # -- Define agent wallet key
    walletKey: "AgentAdminKey" # secret
  # -- VON network API URL 
  vonUrl: "http://10.241.0.10:9000" # http://10.241.0.4:9000
  persistence:
    enabled: true
    storageClassName: default
    accessModes:
      - ReadWriteOnce
    size: 16Gi

identity-and-permissions-manager-admin:
  # -- Enable 5GZORRO Identity and Permissions Manger
  enabled: true
  image:
    # -- Docker image repository
    repository: ghcr.io/5gzorro/platform-automation/identity-and-permissions-manager
    # -- Image pull policy
    pullPolicy: IfNotPresent
    # -- Docker image tag
    # Overrides the image tag whose default is the chart appVersion.
    tag: "latest"
  database:
    # -- MongoDB secrets name (created manually or by custom-resource-5gzorro helm-chart, containing user credentials using connection string format)
    connectionString: "mongodb-admin-admin-idp-admin"
    # -- MongoDB port
    port: "27017"
  ingress:
    # -- Expose the service outside the cluster using ingress
    enabled: true
    # -- Set ingress controller class
    className: "nginx"
    # -- Ingress annotation
    annotations: 
      #cert-manager.io/cluster-issuer: letsencrypt-prod
      helm.sh/resource-policy: keep
    hosts:
      # -- Domain used to expose the service outside the cluster
      - host: admin-idp.${HOSTED_ZONE_NAME}
        paths:
          - path: /
            pathType: Prefix
    tls: 
     # -- Secret name that contain wildcard certificate 
     - secretName: 5gzorro-wildcard-cert #admin-idp-letsencrypt-tls
       hosts:
         - admin-idp.${HOSTED_ZONE_NAME}
  idp:
    # -- Define component role/profile
    role: "admin"
    # -- List of all IDP allowed 
    whitelist: '["*"]'
    # -- Holder Agent URL
    holderAgent: "http://zorro5g-aries-cloudagent-admin:8001"
    # -- Issuer Agent URL
    issuerAgentUrl: "http://zorro5g-aries-cloudagent-admin:8001"
    # -- Trading Provider URL
    tradingProviderAgentControllerUrl: "http://zorro5g-identity-and-permissions-manager-admin:8000"
    # -- Regualator Provider URL
    regulatorAgentControllerUrl: "http://zorro5g-identity-and-permissions-manager-regulator:8000"
    # -- URLs of other IDP controllers
    otherIdpControllers: '["http://zorro5g-identity-and-permissions-manager-trader:8000", "http://zorro5g-identity-and-permissions-manager-regulator:8000", "http://zorro5g-identity-and-permissions-manager-consumer:8000"]'
    # -- URL of the Resource and Service Offer Catalog instance specific for this profile
    adminCatalogueUrl: "http://zorro5g-resource-and-service-offer-catalog-admin:8080/tmf-api/onboardHandler"
    adminLedgerIdentity: "O=Admin,OU=Admin,L=Zurich,C=CH"
    adminLedgerName: "admin"
    key: ""
    vpnaasKey: ""
    # -- Admin DID used for the VON registration
    adminDid: "OD1ndI3xw0Pi6Sl4rgoa6F"

rapp-api-admin:
  # -- Enable 5GZORRO RADIO APPLICATION (rAPP) API
  enabled: true
  image:
    # -- Docker image repository
    repository: ghcr.io/5gzorro/platform-automation/rapp-api
    # -- Image pull policy
    pullPolicy: IfNotPresent
    # -- Docker image tag
    # Overrides the image tag whose default is the chart appVersion.
    tag: "latest"
  database:
    # -- MongoDB secrets name (created manually or by custom-resource-5gzorro helm-chart, containing user credentials using connection string format)
    connectionString: "mongodb-admin-admin-rapp-api-admin"
    # -- MongoDB port
    port: "27017"
  ingress:
    # -- Expose the service outside the cluster using ingress
    enabled: true
    # -- Set ingress controller class
    className: "nginx"
    # -- Ingress annotation
    annotations: 
      #cert-manager.io/cluster-issuer: letsencrypt-prod
      helm.sh/resource-policy: keep
      nginx.ingress.kubernetes.io/cors-allow-origin: "https://admin-gui.${HOSTED_ZONE_NAME}"
      nginx.ingress.kubernetes.io/cors-allow-headers: "DNT, Keep-Alive, User-Agent, X-Requested-With, If-Modified-Since, Cache-Control, Content-Type, Range, Authorization, X-Project-Key"
      nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
      nginx.ingress.kubernetes.io/cors-allow-methods: "GET, PUT, POST, DELETE, PATCH, OPTIONS"
      nginx.ingress.kubernetes.io/cors-expose-headers: "*, X-Project-Key"
      nginx.ingress.kubernetes.io/cors-max-age: "1728000"
      nginx.ingress.kubernetes.io/enable-cors: "true"
    hosts:
      # -- Domain used to expose the service outside the cluster
      - host: admin-rapp-api.${HOSTED_ZONE_NAME}
        paths:
          - path: /
            pathType: Prefix
    tls: 
     # -- Secret name that contain wildcard certificate 
     - secretName: 5gzorro-wildcard-cert 
       hosts:
         - admin-rapp-api.${HOSTED_ZONE_NAME}
  # -- Identity and Permissions Manager Endpoint
  identityPermissionsManagerEndpoint: "http://zorro5g-identity-and-permissions-manager-admin:8000/"
  # -- Radio Controller Endpoint
  radioControllerEndpoint: ""
  # -- Role
  role: admin

governance-manager-api-admin:
  # -- Enable 5GZORRO Governance Manager
  enabled: true
  image:
    repository: ghcr.io/5gzorro/platform-automation/governance-manager-api
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "v0.1.23"
  postgres:
    # -- PostgreSQL hostname (service name if it's in the same namespace, FQDN if NOT)
    host: zorro5g-psqldb-admin
    # -- PostgreSQL port
    port: 5432
    # -- PostgreSQL database name
    name: governancemanageradmin
    # -- PostgreSQL secrets name (created manually or by custom-resource-5gzorro helm-chart, containing user credentials)
    existingSecret: "governancemanageradmin.zorro5g-psqldb-admin.credentials.postgresql.acid.zalan.do"
    # -- PostgreSQL secret username key
    userKey: "username"
    # -- PostgreSQL secret password key
    passwordKey: "password"
  ingress:
    # -- Exposes the service outside the cluster using ingress
    enabled: true
    # -- Set ingress controller class
    className: "nginx"
    # -- Ingress annotation
    annotations: 
      #cert-manager.io/cluster-issuer: letsencrypt-prod
      helm.sh/resource-policy: keep
    hosts:
      # -- Domain used to expose the service outside the cluster
      - host: admin-gm.${HOSTED_ZONE_NAME}
        paths:
          - path: /
            pathType: Prefix
    tls: 
    # -- Secret name that contain wildcard certificate 
     - secretName: 5gzorro-wildcard-cert #admin-gm-letsencrypt-tls
       hosts:
         - admin-gm.${HOSTED_ZONE_NAME}
  # -- Define component role/profile
  role: "admin"
  # -- URL of the Identity and Permissions Manager instance specific for this profile
  identityBaseUrl: "http://zorro5g-identity-and-permissions-manager-admin:8000"
  # -- URL of the Legal Prose Repository instance specific for this profile
  legalProseRepositoryBaseUrl: "http://zorro5g-lagal-prose-repository-admin:8080/legal-prose-repository/api/v1"
  callbacks:
    # -- URL for Governace Manager callback
    updateProposal: "https://admin-gm.${HOSTED_ZONE_NAME}/api/v1/governance-actions/%s/identity"

legal-prose-repository-admin:
  # -- Enable 5GZORRO Legal Prose Repository
  enabled: true
  image:
    repository: ghcr.io/5gzorro/platform-automation/legal-prose-repository-api
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "5gzorro-full-1.0-pre-final"
  postgres:
    # -- PostgreSQL hostname (service name if it's in the same namespace, FQDN if NOT)
    host: zorro5g-psqldb-admin
    # -- PostgreSQL port
    port: 5432
    # -- PostgreSQL database name
    name: legalproseadmin
    # -- PostgreSQL secrets name (created manually or by custom-resource-5gzorro helm-chart, containing user credentials)
    existingSecret: "legalproseadmin.zorro5g-psqldb-admin.credentials.postgresql.acid.zalan.do"
    # -- PostgreSQL secret username key
    userKey: "username"
    # -- PostgreSQL secret password key
    passwordKey: "password"
  ingress:
    # -- Exposes the service outside the cluster using ingress
    enabled: true
    # -- Set ingress controller class
    className: "nginx"
    # -- Ingress annotation
    annotations: 
      #cert-manager.io/cluster-issuer: letsencrypt-prod
      helm.sh/resource-policy: keep
    hosts:
      # -- Domain used to expose the service outside the cluster
      - host: admin-lpr.${HOSTED_ZONE_NAME}
        paths:
          - path: /
            pathType: Prefix
    tls: 
    # -- Secret name that contain wildcard certificate 
     - secretName: 5gzorro-wildcard-cert #admin-lpr-letsencrypt-tls
       hosts:
         - admin-lpr.${HOSTED_ZONE_NAME}
  # -- Define component role/profile
  role: "admin"
  # -- URL of the Identity and Permissions Manager instance specific for this profile
  identityBaseUrl: "http://zorro5g-identity-and-permissions-manager-admin:8000"
  # -- URL of the Governance Manager instance specific for this profile
  governanceBaseUrl: "http://zorro5g-governance-manager-api-admin:8080/api/v1"
  callbacks:
    # -- URL for Legal Prose Template callback
    updateTemplateIdentity: "https://admin-lpr.${HOSTED_ZONE_NAME}/legal-prose-repository/api/v1/legal-prose-templates/%s/identity"

smart-contract-lifecycle-manager-admin:
  # -- Enable 5GZORRO Smart Contract Lifecycle Manager
  enabled: true
  image:
    repository: "ghcr.io/5gzorro/platform-automation/lifecycle-manager-api"
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "5gzorro-full-1.12-pre-final"
  postgres:
    # -- PostgreSQL hostname (service name if it's in the same namespace, FQDN if NOT)
    host: zorro5g-psqldb-admin
    # -- PostgreSQL port
    port: 5432
    # -- PostgreSQL database name
    name: sclmadmin
    # -- PostgreSQL secrets name (created manually or by custom-resource-5gzorro helm-chart, containing user credentials)
    existingSecret: "sclmadmin.zorro5g-psqldb-admin.credentials.postgresql.acid.zalan.do"
    # -- PostgreSQL secret username key
    userKey: "username"
    # -- PostgreSQL secret password key
    passwordKey: "password"
  ingress:
    # -- Exposes the service outside the cluster using ingress
    enabled: true
    # -- Set ingress controller class
    className: "nginx"
    # -- Ingress annotation
    annotations: 
      #cert-manager.io/cluster-issuer: letsencrypt-prod
      helm.sh/resource-policy: keep
    hosts:
    # -- Domain used to expose the service outside the cluster
      - host: admin-sclm.${HOSTED_ZONE_NAME}
        paths:
          - path: /
            pathType: Prefix
    tls: 
    # -- Secret name that contain wildcard certificate 
     - secretName: 5gzorro-wildcard-cert #admin-sclm-letsencrypt-tls
       hosts:
         - admin-sclm.${HOSTED_ZONE_NAME}
  # -- Define component role/profile
  role: "admin"
  # -- URL of the Identity and Permissions Manager instance specific for this profile
  identityBaseUrl: "http://zorro5g-identity-and-permissions-manager-admin:8000"
  # -- URL of the Governance Manager instance specific for this profile
  governanceBaseUrl: "http://zorro5g-governance-manager-api-admin:8080/api/v1"
  # -- URL for Smart Contract Lifecycle Manager callback
  callbacks:
    updateSlaIdentity: "https://admin-sclm.${HOSTED_ZONE_NAME}/smart-contract-lifecycle-manager/api/v1/service-level-agreement/%s/identity"
    updateAgreementIdentity: "https://admin-sclm.${HOSTED_ZONE_NAME}/smart-contract-lifecycle-manager/api/v1/agreement/%s/identity"
  corda:
    # -- Corda username
    username: adminoperations    
    # -- Corda password       
    password: usera     
    # -- Corda hostname        
    host: admin.admin-ns.svc.cluster.local
    # -- Corda port
    port: "10003"
  # -- Operator name 
  operatorName: operatora
  # -- Smart Contract Lifecycle Manager exposed URL
  hostname: "smart-contract-lifecycle-manager-admin:8087"

resource-and-service-offer-catalog-admin:
  # -- Enable 5GZORRO Resource and Service Offer Catalog
  enabled: true
  image:
    repository: "ghcr.io/5gzorro/platform-automation/resource-and-service-offer-catalog"
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "automation"
  # -- Operator name
  operatorName: operatora
  postgres:
    # -- PostgreSQL hostname (service name if it's in the same namespace, FQDN if NOT)
    host: zorro5g-psqldb-admin
    # -- PostgreSQL port
    port: 5432
    # -- PostgreSQL database name
    name: rsocadmin
    # -- PostgreSQL secrets name (created manually or by custom-resource-5gzorro helm-chart, containing user credentials)
    existingSecret: "rsocadmin.zorro5g-psqldb-admin.credentials.postgresql.acid.zalan.do"
    # -- PostgreSQL secret username key
    userKey: "username"
    # -- PostgreSQL secret password key
    passwordKey: "password"
  kafka:
    # -- Kafka URL
    bootstrap: "kafka-cluster-kafka-bootstrap:9092"
    # -- Kafka offerings topic
    offeringsTopic: dlt-product-offerings
    # -- Kafka orders topic
    ordersTopic: dlt-product-orders
  ingress:
  # -- Expose the service outside the cluster using ingress
    enabled: true
    # -- Set ingress controller class
    className: "nginx"
    # -- Ingress annotation
    annotations: 
      #cert-manager.io/cluster-issuer: letsencrypt-prod
      helm.sh/resource-policy: keep
    hosts:
      # -- Domain used to expose the service outside the cluster
      - host: admin-rsoc.${HOSTED_ZONE_NAME}
        paths:
          - path: /
            pathType: Prefix
    tls: 
    # -- Secret name that contain wildcard certificate
     - secretName: 5gzorro-wildcard-cert #admin-rsoc-letsencrypt-tls
       hosts:
         - admin-rsoc.${HOSTED_ZONE_NAME}
  # -- Define component role/profile
  role: "admin"
  did:
    # -- Hostname of the Identity and Permissions Manager instance specific for this profile
    host: "http://zorro5g-identity-and-permissions-manager-admin"
    # -- Port of the Identity and Permissions Manager instance specific for this profile
    port: "8000"
  lcm:
    # -- URL of the Resource and Service Offer Catalog instance specific for this profile
    host: "smart-contract-lifecycle-manager-admin"
    # -- Port of the Resource and Service Offer Catalog instance specific for this profile
    port: "8087"
    # -- Product offer API path
    offerPath: "/product-offer/"
    # -- Product order API path
    orderPath: "/product_order/"
    # -- Issue API path
    issuePath: "/spectoken/derivative/issue"
    # -- Service level agreement path
    slaPath: "/api/v1/service-level-agreement/"
    # -- Skip post 
    skipPost: "false"
  srsd:
    # -- Hostname of the Smart Resource and Service Discovery instance specific for this profile
    host: "zorro5g-smart-resource-and-service-discovery-admin"
    # -- Port of the Smart Resource and Service Discovery instance specific for this profile
    port: "5000"
    # -- Request API path
    requestPath: "/classifyOffer"
    # -- Skip post 
    skipPost: "false"
  # -- Resource and Service Offer Catalog exposed URL
  hostname: "resource-and-service-offer-catalog-admin"

gui-admin:
  # -- Enable 5GZORRO GUI
  enabled: true
  image:
    repository: ghcr.io/5gzorro/platform-automation/gui
    tag: latest
    pullPolicy: Always
  ingress:
    # -- Expose the service outside the cluster using ingress
    enabled: true
    # -- Set ingress controller class
    className: "nginx"
    # -- Ingress annotation
    annotations: 
      #cert-manager.io/cluster-issuer: letsencrypt-prod
      helm.sh/resource-policy: keep
    hosts:
      # -- Domain used to expose the service outside the cluster
      - host: admin-gui.${HOSTED_ZONE_NAME}
        paths:
          - path: /
            pathType: Prefix
    tls: 
    # -- Secret name that contain wildcard certificate
     - secretName: 5gzorro-wildcard-cert #admin-gui-letsencrypt-tls
       hosts:
         - admin-gui.${HOSTED_ZONE_NAME}
  # -- Define component role/profile
  role: "admin"
  # -- External URL of the Resource and Service Offer Catalog instance specific for this profile
  marketPlaceUrl: 'https://admin-rsoc.${HOSTED_ZONE_NAME}/tmf-api'
  # -- External URL of the Legal Prose Repository instance specific for this profile
  legalProseUrl: 'https://admin-lpr.${HOSTED_ZONE_NAME}'
  # -- External URL of the Governance Manager instance specific for this profile
  governanceUrl: 'https://admin-gm.${HOSTED_ZONE_NAME}'
  # -- External URL of the Identity and Permissions Manager instance specific for this profile
  identityPermissionsUrl: 'https://admin-idp.${HOSTED_ZONE_NAME}'
  # -- External URL of the Smart Contract Lifecycle Manager instance specific for this profile
  smartContractUrl: 'https://admin-sclm.${HOSTED_ZONE_NAME}/smart-contract-lifecycle-manager/'
  # -- External URL of the xRM instance specific for this profile 
  resourceManagerEndpoint: 'https://admin-xrm.${HOSTED_ZONE_NAME}'
  # -- xRM discovery API key
  resourceManagerDiscoveryApiKey: 'ce0b0017-843c-4811-bb76-1005733cf3ec'
  # -- xRM translator API key
  resourceManagerTraslatorApiKey: 'fe6d588b-1d6b-4954-9e26-a334d0d09eed'
  # -- RAPP discovery API key
  rappDiscoveryApiKey: 'fc7def3f-0490-4c17-931f-6f6e4c759890'
  # -- Intelligent slice and service manager discovery API key
  sliceDiscoveryApiKey: '685be7dc-6ed3-46de-90da-bc21747568a1'
  # -- DLT ledger identity
  ledgerIdentity: 'O=Admin,OU=Admin,L=Zurich,C=CH'
  # -- URL of the Smart Resource and Service Discovery instance specific for this profile
  srsdUrl: 'https://admin-srsd.${HOSTED_ZONE_NAME}'
  # -- URL of the Intelligent slice and service manager instance specific for this profile 
  issmUrl: 'https://admin-issm.${HOSTED_ZONE_NAME}'
  # -- URL of the RAPP instance specific for this profile
  rappUrl: 'https://admin-rapp-api.${HOSTED_ZONE_NAME}'

smart-resource-and-service-discovery-admin:
  # -- Enable 5GZORRO Smart Resource and Service Discovery
  enabled: true
  image:
    repository: ghcr.io/5gzorro/platform-automation/srd-api
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "latest"
  ingress:
    # -- Exposes the service outside the cluster using ingress
    enabled: true
    # -- Set ingress controller class
    className: "nginx"
    # -- Ingress annotation
    annotations: 
      #cert-manager.io/cluster-issuer: letsencrypt-prod
      helm.sh/resource-policy: keep
    hosts:
      # -- Domain used to expose the service outside the cluster
      - host: admin-srsd.${HOSTED_ZONE_NAME}
        paths:
          - path: /
            pathType: Prefix
    tls: 
    # -- Secret name that contain wildcard certificate 
     - secretName: 5gzorro-wildcard-cert #admin-srsd-letsencrypt-tls
       hosts:
         - admin-srsd.${HOSTED_ZONE_NAME}
  mongo:
    # -- MongoDB secrets name (created manually or by custom-resource-5gzorro helm-chart, containing user credentials using connection string format)
    uri: "mongodb-admin-admin-srsd"
    
monitoring-data-aggregator-admin:
  # -- Enable 5GZORRO Monitoring Data Aggregator
  enabled: true
  image:
    repository: ghcr.io/5gzorro/platform-automation/mda
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "c7de045"
  postgres:
    # -- PostgreSQL hostname (service name if it's in the same namespace, FQDN if NOT)
    host: zorro5g-psqldb-admin
    # -- PostgreSQL port
    port: 5432
    # -- PostgreSQL database name
    name: mdaadmin
    # -- PostgreSQL secrets name (created manually or by custom-resource-5gzorro helm-chart, containing user credentials)
    existingSecret: "mdaadmin.zorro5g-psqldb-admin.credentials.postgresql.acid.zalan.do"
    # -- PostgreSQL secret username key
    userKey: "username"
    # -- PostgreSQL secret password key
    passwordKey: "password"
  ingress:
    # -- Expose the service outside the cluster using ingress
    enabled: false
  role: "admin"
  # -- Define component role/profile
  kafka:
    # -- Kafka Hostname
    host: kafka-cluster-kafka-bootstrap
    # -- Kafka Port
    port: 9092

xrm-admin:
  # -- Enable 5GZORRO Any Resource Manager (xRM)
  enabled: true
  # -- Define component role/profile
  role: "admin"
  ingress:
    # -- Expose the service outside the cluster using ingress
    enabled: true
    # -- Set ingress controller class
    className: "nginx"
    # -- Ingress annotation
    annotations: 
      #cert-manager.io/cluster-issuer: letsencrypt-prod
      helm.sh/resource-policy: keep
    hosts:
      # -- Domain used to expose the service outside the cluster
      - host: admin-xrm.${HOSTED_ZONE_NAME}
        paths:
          - path: /
            pathType: Prefix
    tls: 
    # -- Secret name that contain wildcard certificate
     - secretName: 5gzorro-wildcard-cert #consumer-idp-letsencrypt-tls
       hosts:
         - admin-xrm.${HOSTED_ZONE_NAME}
  catalogueapp: 
    image:
      repository: ghcr.io/5gzorro/platform-automation/xrm-catalogue-app
      pullPolicy: IfNotPresent
      tag: "fix3"
    postgres:
      # -- PostgreSQL hostname (service name if it's in the same namespace, FQDN if NOT)
      host: zorro5g-psqldb-admin
      # -- PostgreSQL port
      port: 5432
      # -- PostgreSQL database name
      name: xrmcatalogueappadmin
      # -- PostgreSQL secrets name (created manually or by custom-resource-5gzorro helm-chart, containing user credentials)
      existingSecret: "xrmcatalogueappadmin.zorro5g-psqldb-admin.credentials.postgresql.acid.zalan.do"
      # -- PostgreSQL secret username key
      userKey: "username"
      # -- PostgreSQL secret password key
      passwordKey: "password"
    mano:
      # -- Mano istance ID
      id: "ZORRO_OSMR10"
      # -- Mano typr
      type: "OSMR10"
      # -- Mano Site
      site: "ZORRO_OSM"
      # -- Mano exposed URL 
      ip: "osm.${HOSTED_ZONE_NAME}"
      # -- Mano port
      port: "80"
      # -- Mano account username
      username: "admin"
      # -- Mano account password
      password: "admin"
      # -- Mano project name
      project: "admin"
    catalogue:
      # -- Resource and Service Offer Catalog ID
      id: "DEFAULT_CAT"
      # -- URL of the Resource and Service Offer Catalog instance specific for this profile
      url: "http://zorro5g-resource-and-service-offer-catalog-admin:8080"
  catalogueui:
    image:
      repository: ghcr.io/5gzorro/platform-automation/xrm-catalogue-gui
      pullPolicy: IfNotPresent
      tag: "latest"
    keycloak:
      # -- Enable keycloak for xRM catalogue GUI
      enabled: false
    catalogue:
      # -- xRM catalogue GUI port
      port: "80"
      # -- xRM catalogue GUI scope
      scope: "PUBLIC" 
  kafka:
    # -- Kafka URL
    host: "kafka-cluster-kafka-bootstrap:9092"
  gateway:
    image:
      repository: graviteeio/apim-gateway
      pullPolicy: IfNotPresent
      tag: "3"
    mongo:
      # -- MongoDB secrets name (created manually or by custom-resource-5gzorro helm-chart, containing user credentials using connection string format)
      uri: "mongodb-admin-admin-xrm-admin"
  managementapi:
    image:
      repository: graviteeio/apim-management-api
      pullPolicy: IfNotPresent
      tag: "3"
    mongo:
      # -- MongoDB secrets name (created manually or by custom-resource-5gzorro helm-chart, containing user credentials using connection string format)
      uri: "mongodb-admin-admin-xrm-admin"
  managementui:
    image:
      repository: graviteeio/apim-management-ui
      pullPolicy: IfNotPresent
      tag: "3"
  elasticsearch:
    image:
      repository: docker.elastic.co/elasticsearch/elasticsearch
      pullPolicy: IfNotPresent
      tag: "7.7.0"
  portalui:
    image:
      repository: graviteeio/apim-portal-ui
      pullPolicy: IfNotPresent
      tag: "3"
  translator:
    image:
      repository: ghcr.io/5gzorro/platform-automation/xrm-resource-definition-translator
      pullPolicy: IfNotPresent
      tag: "latest"
    postgres:
      # -- PostgreSQL hostname (service name if it's in the same namespace, FQDN if NOT)
      host: zorro5g-psqldb-admin
      # -- PostgreSQL port
      port: 5432
      # -- PostgreSQL database name
      name: xrmtranslatoradmin
      # -- PostgreSQL secrets name (created manually or by custom-resource-5gzorro helm-chart, containing user credentials)
      existingSecret: "xrmtranslatoradmin.zorro5g-psqldb-admin.credentials.postgresql.acid.zalan.do"
      # -- PostgreSQL secret username key
      userKey: "username"
      # -- PostgreSQL secret password key
      passwordKey: "password"

issm-admin:
  # -- Enable 5GZORRO Intelligent Slice and Service Manager
  enabled: true 
  # -- Define component role/profile
  role: "admin"
  # -- ISSM orchestrator type
  orchestrator: "nsso"
  # -- Operator name
  operatorName: operatora
  kafka:
    # -- Kafka Hostname
    url: "kafka-cluster-kafka-bootstrap.default.svc.cluster.local"
    # -- Kafka Port
    port: "9092"
  ingress:
    # -- Expose the service outside the cluster using ingress
    enabled: true
    # -- Set ingress controller class
    className: "nginx"
    # -- Ingress annotation
    annotations: 
      #cert-manager.io/cluster-issuer: letsencrypt-prod
      helm.sh/resource-policy: keep
    hosts:
      # -- Domain used to expose the service outside the cluster
      - host: admin-issm.${HOSTED_ZONE_NAME}
        paths:
          - path: /
            pathType: Prefix
    tls: 
      # -- Secret name that contain wildcard certificate
     - secretName: 5gzorro-wildcard-cert #consumer-idp-letsencrypt-tls
       hosts:
         - admin-issm.${HOSTED_ZONE_NAME}
  argo:
    # -- Argo internal service URL
    internal: "zorro5g-argo-workflows-server.default.svc.cluster.local:2746"
    # -- Argo external service URL
    external: "https://argo.${HOSTED_ZONE_NAME}"
  api:
    image:
      repository: ghcr.io/5gzorro/platform-automation/issm-api
      pullPolicy: IfNotPresent
      # Overrides the image tag whose default is the chart appVersion.
      tag: "ffaf212"
  optimizer:
    image:
      repository: ghcr.io/5gzorro/platform-automation/issm-optimizer
      pullPolicy: IfNotPresent
      # Overrides the image tag whose default is the chart appVersion.
      tag: "temp"

nsso-admin:
  # -- Enable 5GZORRO Network Slice and Service Orchestrator
  enabled: true
  uiimage:
    repository: ghcr.io/5gzorro/platform-automation/nssoui
    tag: fix
    pullPolicy: Always
  image:
    repository: ghcr.io/5gzorro/platform-automation/nsso
    tag: latest
    pullPolicy: Always
  # -- Define component role/profile
  role: admin
  postgres:
    # -- PostgreSQL hostname (service name if it's in the same namespace, FQDN if NOT)
    url: jdbc:postgresql://zorro5g-psqldb-admin:5432/nssoadmin?sslmode=require
    # -- PostgreSQL secrets name (created manually or by custom-resource-5gzorro helm-chart, containing user credentials)
    existingSecret: "nssoadmin.zorro5g-psqldb-admin.credentials.postgresql.acid.zalan.do"
    # -- PostgreSQL secret username key
    userKey: "username"
    # -- PostgreSQL secret password key
    passwordKey: "password"
  nfvo:
    catalogue:
      # -- Mano type
      type: OSM10
      # -- Mano exposed URL
      address: http://osm.${HOSTED_ZONE_NAME}
    lcm:
      # -- Mano type
      type: OSM10
      # -- Mano exposed URL
      address: http://osm.${HOSTED_ZONE_NAME}
      # -- Mano project name
      project: admin
      # -- Mano account username
      username: "admin"
      # -- Mano account password
      password: "admin"
  rabbitmq:
    # -- Rabbitmq cluster hostname
    host: zorro5g-nsso-admin-rabbitmq

trmf-admin:
  # -- Enable 5GZORRO Trust and Reputation Management Framework
  enabled: true
  image:
    tag: fix
    app: trmf
    repository: ghcr.io/5gzorro/platform-automation/trmf
    pullPolicy: Always
    pullSecrets: ""
  # -- Define component role/profile
  role: "admin"
  trmfdb:
    # -- Persistence configuration for TRMF internal database
    persistence:
      storageClassName: "default"
      size: 8Gi
  catalogue:
    # -- URL of the Resource and Service Offer Catalog instance specific for this profile
    uri: http://zorro5g-resource-and-service-offer-catalog-admin:8080/tmf-api/
  elk:
    # -- URL of the ElasticSearch instance specific for this profile
    uri: http://zorro5g-xrm-admin-elasticsearch:9200/
  datalake:
    # -- Kafka Hostname
    kafka: kafka-cluster-kafka-bootstrap:9092
######################## END Admin Profile Block ########################
######################## START Regulator Profile Block ########################
elma-regulator:
  enabled: true
  image:
    # -- Docker image tag
    tag: gitlab-ci
    app: elma
    # -- Docker image repository
    image: ghcr.io/5gzorro/platform-automation/elma
    # -- Image pull policy
    pullPolicy: Always
  role: regulator
  domainId: "regulator"
  catalog:
    url: "zorro5g-resource-and-service-offer-catalog-regulator"
    port: "8080"
    resources: "None"
  netSlice:
    url: "172.28.3.15"
    port: "31082"
    endpoint: "portal/elicensing/"
  datalake:
    url: "http://zorro5g-datalake:8080/datalake/v1/catalog/instance/{instance_id}"
    auth: '{"userInfo": {"userId": "operator-b", "authToken": "blah"}}'
    kafka: "kafka-cluster-kafka-bootstrap:9092"
  rabbitmq:
    url: "rabbitmq-elma-regulator"
    existingSecret: "rabbitmq-elma-regulator-default-user"
    userKey: "username"
    passwordKey: "password"

aries-cloudagent-regulator:
  enabled: true
  image:
    # -- Docker image repository
    repository: ghcr.io/5gzorro/platform-automation/aries-cloudagent
    # -- Image pull policy
    pullPolicy: IfNotPresent
    # -- Docker image tag
    # Overrides the image tag whose default is the chart appVersion.
    tag: "0.6.0"
  agent:
    role: "regulator"  # Admin, Regulator, Holder, Verifier
    label: "AgentRegualtor" # AgentRegulator
    seed: "AgentRegulator000000000000000000" # AgentRegulator00000000000000000
    did: "KhgK8deVdK93xbTqkVMzVs"
    walletName: "AgentRegualtor" # AgentRegulator
    walletKey: "AgentRegulatorKey" # secret
  vonUrl: "http://10.241.0.10:9000" # http://10.241.0.4:9000
  persistence:
    enabled: false
    # storageClassName: default
    accessModes:
      - ReadWriteOnce
    size: 16Gi

identity-and-permissions-manager-regulator:
  enabled: true
  image:
    # -- Docker image repository
    repository: ghcr.io/5gzorro/platform-automation/identity-and-permissions-manager
    # -- Image pull policy
    pullPolicy: IfNotPresent
    # -- Docker image tag
    # Overrides the image tag whose default is the chart appVersion.
    tag: "latest"
  database:
    connectionString: "mongodb-regulator-admin-idp-regulator"
    port: ""
  ingress:
    enabled: true
    className: "nginx"
    annotations: 
      #cert-manager.io/cluster-issuer: letsencrypt-prod
      helm.sh/resource-policy: keep
    hosts:
      - host: regulator-idp.${HOSTED_ZONE_NAME}
        paths:
          - path: /
            pathType: Prefix
    tls: 
     - secretName: 5gzorro-wildcard-cert #regulator-idp-letsencrypt-tls
       hosts:
         - regulator-idp.${HOSTED_ZONE_NAME}
  idp:
    role: "regulator"
    whitelist: '["*"]'
    holderAgent: "http://zorro5g-aries-cloudagent-regulator:8001"
    issuerAgentUrl: "http://zorro5g-aries-cloudagent-regulator:8001"
    tradingProviderAgentControllerUrl: "http://zorro5g-identity-and-permissions-manager-regulator:8000"
    adminAgentControllerUrl: "http://zorro5g-identity-and-permissions-manager-admin:8000"
    otherIdpControllers: '["http://zorro5g-identity-and-permissions-manager-trader:8000", "http://zorro5g-identity-and-permissions-manager-admin:8000", "http://zorro5g-identity-and-permissions-manager-consumer:8000" ]'
    key: ""
    vpnaasKey: ""

rapp-api-regulator:
  enabled: true
  image:
    # -- Docker image repository
    repository: ghcr.io/5gzorro/platform-automation/rapp-api
    # -- Image pull policy
    pullPolicy: IfNotPresent
    # -- Docker image tag
    # Overrides the image tag whose default is the chart appVersion.
    tag: "latest"
  database:
    connectionString: "mongodb-regulator-admin-rapp-api-regulator"
    port: ""
  ingress:
    enabled: true
    className: "nginx"
    annotations: 
      #cert-manager.io/cluster-issuer: letsencrypt-prod
      helm.sh/resource-policy: keep
      nginx.ingress.kubernetes.io/cors-allow-origin: "https://regulator-gui.${HOSTED_ZONE_NAME}"
      nginx.ingress.kubernetes.io/cors-allow-headers: "DNT, Keep-Alive, User-Agent, X-Requested-With, If-Modified-Since, Cache-Control, Content-Type, Range, Authorization, X-Project-Key"
      nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
      nginx.ingress.kubernetes.io/cors-allow-methods: "GET, PUT, POST, DELETE, PATCH, OPTIONS"
      nginx.ingress.kubernetes.io/cors-expose-headers: "*, X-Project-Key"
      nginx.ingress.kubernetes.io/cors-max-age: "1728000"
      nginx.ingress.kubernetes.io/enable-cors: "true"
    hosts:
      - host: regulator-rapp-api.${HOSTED_ZONE_NAME}
        paths:
          - path: /
            pathType: Prefix
    tls: 
     - secretName: 5gzorro-wildcard-cert 
       hosts:
         - regulator-rapp-api.${HOSTED_ZONE_NAME}
  identityPermissionsManagerEndpoint: "http://zorro5g-identity-and-permissions-manager-regulator:8000/"
  radioControllerEndpoint: ""
  role: regulator

governance-manager-api-regulator:
  enabled: true
  image:
    repository: ghcr.io/5gzorro/platform-automation/governance-manager-api
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "v0.1.23"
  postgres:
    host: zorro5g-psqldb-regulator
    port: 5432
    name: governancemanagerregulator
    existingSecret: "governancemanagerregulator.zorro5g-psqldb-regulator.credentials.postgresql.acid.zalan.do"
    userKey: "username"
    passwordKey: "password"
  ingress:
    enabled: true
    className: "nginx"
    annotations: 
      #cert-manager.io/cluster-issuer: letsencrypt-prod
      helm.sh/resource-policy: keep
    hosts:
      - host: regulator-gm.${HOSTED_ZONE_NAME}
        paths:
          - path: /
            pathType: Prefix
    tls: 
     - secretName: 5gzorro-wildcard-cert #regulator-gm-letsencrypt-tls
       hosts:
         - regulator-gm.${HOSTED_ZONE_NAME}
  role: "regulator"
  identityBaseUrl: "http://zorro5g-identity-and-permissions-manager-regulator:8000"
  legalProseRepositoryBaseUrl: "http://zorro5g-lagal-prose-repository-regulator:8080/legal-prose-repository/api/v1"
  callbacks:
    updateProposal: "https://regulator-gm.${HOSTED_ZONE_NAME}/api/v1/governance-actions/%s/identity"

legal-prose-repository-regulator:
  enabled: true
  image:
    repository: ghcr.io/5gzorro/platform-automation/legal-prose-repository-api
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "5gzorro-full-1.0-pre-final"
  postgres:
    host: zorro5g-psqldb-regulator
    port: 5432
    name: legalproseregulator
    existingSecret: "legalproseregulator.zorro5g-psqldb-regulator.credentials.postgresql.acid.zalan.do"
    userKey: "username"
    passwordKey: "password"
  ingress:
    enabled: true
    className: "nginx"
    annotations: 
      #cert-manager.io/cluster-issuer: letsencrypt-prod
      helm.sh/resource-policy: keep
    hosts:
      - host: regulator-lpr.${HOSTED_ZONE_NAME}
        paths:
          - path: /
            pathType: Prefix
    tls: 
     - secretName: 5gzorro-wildcard-cert #regulator-lpr-letsencrypt-tls
       hosts:
         - regulator-lpr.${HOSTED_ZONE_NAME}
  role: "regulator"
  identityBaseUrl: "http://zorro5g-identity-and-permissions-manager-regulator:8000"
  governanceBaseUrl: "http://zorro5g-governance-manager-api-regulator:8080/api/v1"
  callbacks:
    updateTemplateIdentity: "https://regulator-lpr.${HOSTED_ZONE_NAME}/legal-prose-repository/api/v1/legal-prose-templates/%s/identity"

smart-contract-lifecycle-manager-regulator:
  enabled: true
  image:
    repository: "ghcr.io/5gzorro/platform-automation/lifecycle-manager-api"
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "5gzorro-full-1.12-pre-final"
  postgres:
    host: zorro5g-psqldb-regulator
    port: 5432
    name: sclmregulator
    existingSecret: "sclmregulator.zorro5g-psqldb-regulator.credentials.postgresql.acid.zalan.do"
    userKey: "username"
    passwordKey: "password"
  ingress:
    enabled: true
    className: "nginx"
    annotations: 
      #cert-manager.io/cluster-issuer: letsencrypt-prod
      helm.sh/resource-policy: keep
    hosts:
      - host: regulator-sclm.${HOSTED_ZONE_NAME}
        paths:
          - path: /
            pathType: Prefix
    tls: 
     - secretName: 5gzorro-wildcard-cert #regulator-sclm-letsencrypt-tls
       hosts:
         - regulator-sclm.${HOSTED_ZONE_NAME}
  role: "regulator"
  identityBaseUrl: "http://zorro5g-identity-and-permissions-manager-regulator:8000"
  governanceBaseUrl: "http://zorro5g-governance-manager-api-regulator:8080/api/v1"
  callbacks:
    updateSlaIdentity: "https://regulator-sclm.${HOSTED_ZONE_NAME}/smart-contract-lifecycle-manager/api/v1/service-level-agreement/%s/identity"
    updateAgreementIdentity: "https://regulator-sclm.${HOSTED_ZONE_NAME}/smart-contract-lifecycle-manager/api/v1/agreement/%s/identity"
  corda:
    username: regulatoroperations           
    password: usera             
    host: regulator.regulator-ns.svc.cluster.local
    port: "10003"
  operatorName: regualtora
  hostname: "smart-contract-lifecycle-manager-regulator:8087"

resource-and-service-offer-catalog-regulator:
  enabled: true
  image:
    repository: "ghcr.io/5gzorro/platform-automation/resource-and-service-offer-catalog"
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "automation"
  operatorName: regulatora
  postgres:
    host: zorro5g-psqldb-regulator
    port: 5432
    name: rsocregulator
    existingSecret: "rsocregulator.zorro5g-psqldb-regulator.credentials.postgresql.acid.zalan.do"
    userKey: "username"
    passwordKey: "password"
  kafka:
    bootstrap: "kafka-cluster-kafka-bootstrap:9092"
    offeringsTopic: dlt-product-offerings
    ordersTopic: dlt-product-orders
  ingress:
    enabled: true
    className: "nginx"
    annotations: 
      #cert-manager.io/cluster-issuer: letsencrypt-prod
      helm.sh/resource-policy: keep
    hosts:
      - host: regulator-rsoc.${HOSTED_ZONE_NAME}
        paths:
          - path: /
            pathType: Prefix
    tls: 
     - secretName: 5gzorro-wildcard-cert #regulator-rsoc-letsencrypt-tls
       hosts:
         - regulator-rsoc.${HOSTED_ZONE_NAME}
  role: "regulator"
  did:
    host: "http://zorro5g-identity-and-permissions-manager-regulator"
    port: "8000"
  lcm:
    host: "smart-contract-lifecycle-manager-regulator"
    port: "8087"
    offerPath: "/product-offer/"
    orderPath: "/product_order/"
    issuePath: "/spectoken/derivative/issue"
    slaPath: "/api/v1/service-level-agreement/"
    skipPost: "false"
  srsd:
    host: "zorro5g-smart-resource-and-service-discovery-regulator"
    port: "5000"
    requestPath: "/classifyOffer"
    skipPost: "false"
  hostname: "resource-and-service-offer-catalog-regulator"

gui-regulator:
  enabled: true
  image:
    repository: ghcr.io/5gzorro/platform-automation/gui
    tag: latest
    pullPolicy: Always
  ingress:
    enabled: true
    className: "nginx"
    annotations: 
      #cert-manager.io/cluster-issuer: letsencrypt-prod
      helm.sh/resource-policy: keep
    hosts:
      - host: regulator-gui.${HOSTED_ZONE_NAME}
        paths:
          - path: /
            pathType: Prefix
    tls: 
     - secretName: 5gzorro-wildcard-cert #regulator-gui-letsencrypt-tls
       hosts:
         - regulator-gui.${HOSTED_ZONE_NAME}
  role: "regulator"
  marketPlaceUrl: 'https://regulator-rsoc.${HOSTED_ZONE_NAME}/tmf-api'
  legalProseUrl: 'https://regulator-lpr.${HOSTED_ZONE_NAME}'
  governanceUrl: 'https://regulator-gm.${HOSTED_ZONE_NAME}'
  identityPermissionsUrl: 'https://regulator-idp.${HOSTED_ZONE_NAME}'
  smartContractUrl: 'https://regulator-sclm.${HOSTED_ZONE_NAME}/smart-contract-lifecycle-manager/'
  resourceManagerEndpoint: 'https://regulator-xrm.${HOSTED_ZONE_NAME}'
  resourceManagerDiscoveryApiKey: 'ce0b0017-843c-4811-bb76-1005733cf3ec'
  resourceManagerTraslatorApiKey: 'fe6d588b-1d6b-4954-9e26-a334d0d09eed'
  rappDiscoveryApiKey: 'fc7def3f-0490-4c17-931f-6f6e4c759890'
  sliceDiscoveryApiKey: '685be7dc-6ed3-46de-90da-bc21747568a1'
  ledgerIdentity: 'O=Regulator,OU=Regulator,L=Boston,C=US'
  srsdUrl: 'https://regulator-srsd.${HOSTED_ZONE_NAME}'
  issmUrl: 'https://regulator-issm.${HOSTED_ZONE_NAME}'
  rappUrl: 'https://regulator-rapp-api.${HOSTED_ZONE_NAME}'

smart-resource-and-service-discovery-regulator:
  enabled: true
  image:
    repository: ghcr.io/5gzorro/platform-automation/srd-api
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "latest"
  ingress:
    enabled: true
    className: "nginx"
    annotations: 
      #cert-manager.io/cluster-issuer: letsencrypt-prod
      helm.sh/resource-policy: keep
    hosts:
      - host: regulator-srsd.${HOSTED_ZONE_NAME}
        paths:
          - path: /
            pathType: Prefix
    tls: 
     - secretName: 5gzorro-wildcard-cert #regulator-srsd-letsencrypt-tls
       hosts:
         - regulator-srsd.${HOSTED_ZONE_NAME}
  mongo:
    uri: "mongodb-regulator-admin-srsd"

monitoring-data-aggregator-regulator:
  enabled: true
  image:
    repository: ghcr.io/5gzorro/platform-automation/mda
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "c7de045"
  postgres:
    host: zorro5g-psqldb-regulator
    port: 5432
    name: mdaregulator
    existingSecret: "mdaregulator.zorro5g-psqldb-regulator.credentials.postgresql.acid.zalan.do"
    userKey: "username"
    passwordKey: "password"
  ingress:
    enabled: false
  role: "regulator"
  kafka:
    host: kafka-cluster-kafka-bootstrap
    port: 9092

xrm-regulator:
  enabled: true
  role: "regulator"
  ingress:
    enabled: true
    className: "nginx"
    annotations: 
      #cert-manager.io/cluster-issuer: letsencrypt-prod
      helm.sh/resource-policy: keep
    hosts:
      - host: regulator-xrm.${HOSTED_ZONE_NAME}
        paths:
          - path: /
            pathType: Prefix
    tls: 
     - secretName: 5gzorro-wildcard-cert #consumer-idp-letsencrypt-tls
       hosts:
         - regulator-xrm.${HOSTED_ZONE_NAME}
  catalogueapp: 
    image:
      repository: ghcr.io/5gzorro/platform-automation/xrm-catalogue-app
      pullPolicy: IfNotPresent
      tag: "fix3"
    postgres:
      host: zorro5g-psqldb-regulator
      port: 5432
      name: xrmcatalogueappregulator
      existingSecret: "xrmcatalogueappregulator.zorro5g-psqldb-regulator.credentials.postgresql.acid.zalan.do"
      userKey: "username"
      passwordKey: "password"
    mano:
      id: "ZORRO_OSMR10"
      type: "OSMR10"
      site: "ZORRO_OSM"
      ip: "osm.${HOSTED_ZONE_NAME}"
      port: "80"
      username: "admin"
      password: "admin"
      project: "regulator"
    catalogue:
      id: "DEFAULT_CAT"
      url: "http://zorro5g-resource-and-service-offer-catalog-regulator:8080"
  catalogueui:
    image:
      repository: ghcr.io/5gzorro/platform-automation/xrm-catalogue-gui
      pullPolicy: IfNotPresent
      tag: "latest"
    keycloak:
      enabled: false
    catalogue:
      port: "80"
      scope: "PUBLIC" 
  kafka:
    host: "kafka-cluster-kafka-bootstrap:9092"
  gateway:
    mongo:
      uri: "mongodb-regulator-admin-xrm-regulator"
  managementapi:
    mongo:
      uri: "mongodb-regulator-admin-xrm-regulator"
  translator:
    image:
      repository: ghcr.io/5gzorro/platform-automation/xrm-resource-definition-translator
      pullPolicy: IfNotPresent
      tag: "latest"
    postgres:
      host: zorro5g-psqldb-regulator
      port: 5432
      name: xrmtranslatorregulator
      existingSecret: "xrmtranslatorregulator.zorro5g-psqldb-regulator.credentials.postgresql.acid.zalan.do"
      userKey: "username"
      passwordKey: "password"
######################## END Regulator Profile Block ########################
######################## START Trader Profile Block ########################
elma-trader:
  enabled: true
  image:
    # -- Docker image tag
    tag: gitlab-ci
    app: elma
    # -- Docker image repository
    image: ghcr.io/5gzorro/platform-automation/elma
    # -- Image pull policy
    pullPolicy: Always
  role: trader
  domainId: "trader"
  catalog:
    url: "zorro5g-resource-and-service-offer-catalog-trader"
    port: "8080"
    resources: "None"
  netSlice:
    url: "172.28.3.15"
    port: "31082"
    endpoint: "portal/elicensing/"
  datalake:
    url: "http://zorro5g-datalake:8080/datalake/v1/catalog/instance/{instance_id}"
    auth: '{"userInfo": {"userId": "operator-c", "authToken": "blah"}}'
    kafka: "kafka-cluster-kafka-bootstrap:9092"
  rabbitmq:
    url: "rabbitmq-elma-trader"
    existingSecret: "rabbitmq-elma-trader-default-user"
    userKey: "username"
    passwordKey: "password"

aries-cloudagent-trader:
  enabled: true
  image:
    # -- Docker image repository
    repository: ghcr.io/5gzorro/platform-automation/aries-cloudagent
    # -- Image pull policy
    pullPolicy: IfNotPresent
    # -- Docker image tag
    # Overrides the image tag whose default is the chart appVersion.
    tag: "0.6.0"
  agent:
    role: "trader"  # Admin, Regulator, Holder, Verifier
    label: "AgentHolder" # AgentRegulator
    seed: "AgentHolder000000000000000000000" # AgentRegulator00000000000000000
    did: "5YhRzG3iwWi195vHuxMJPy"
    walletName: "AgentHolder" # AgentRegulator
    walletKey: "AgentHolderKey" # secret
  vonUrl: "http://10.241.0.10:9000" # http://10.241.0.4:9000
  persistence:
    enabled: false
    # storageClassName: default
    accessModes:
      - ReadWriteOnce
    size: 16Gi

identity-and-permissions-manager-trader: # holder
  enabled: true
  image:
    # -- Docker image repository
    repository: ghcr.io/5gzorro/platform-automation/identity-and-permissions-manager
    # -- Image pull policy
    pullPolicy: IfNotPresent
    # -- Docker image tag
    # Overrides the image tag whose default is the chart appVersion.
    tag: "latest"
  database:
    connectionString: "mongodb-trader-admin-idp-trader"
    port: ""
  ingress:
    enabled: true
    className: "nginx"
    annotations: 
      #cert-manager.io/cluster-issuer: letsencrypt-prod
      helm.sh/resource-policy: keep
    hosts:
      - host: trader-idp.${HOSTED_ZONE_NAME}
        paths:
          - path: /
            pathType: Prefix
    tls: 
     - secretName: 5gzorro-wildcard-cert #trader-idp-letsencrypt-tls
       hosts:
         - trader-idp.${HOSTED_ZONE_NAME}
  idp:
    role: "trader"
    whitelist: '["*"]'
    holderAgent: "http://zorro5g-aries-cloudagent-trader:8001"
    issuerAgentUrl: "http://zorro5g-aries-cloudagent-trader:8001"
    tradingProviderAgentControllerUrl: "http://zorro5g-identity-and-permissions-manager-trader:8000"
    adminAgentControllerUrl: "http://zorro5g-identity-and-permissions-manager-admin:8000"
    regulatorAgentControllerUrl: "http://zorro5g-identity-and-permissions-manager-regulator:8000"
    otherIdpControllers: '["http://zorro5g-identity-and-permissions-manager-regulator:8000", "http://zorro5g-identity-and-permissions-manager-admin:8000", "http://zorro5g-identity-and-permissions-manager-consumer:8000" ]'
    key: ""
    vpnaasKey: ""

rapp-api-trader:
  enabled: true
  image:
    # -- Docker image repository
    repository: ghcr.io/5gzorro/platform-automation/rapp-api
    # -- Image pull policy
    pullPolicy: IfNotPresent
    # -- Docker image tag
    # Overrides the image tag whose default is the chart appVersion.
    tag: "latest"
  database:
    connectionString: "mongodb-trader-admin-rapp-api-trader"
    port: ""
  ingress:
    enabled: true
    className: "nginx"
    annotations: 
      #cert-manager.io/cluster-issuer: letsencrypt-prod
      helm.sh/resource-policy: keep
      nginx.ingress.kubernetes.io/cors-allow-origin: "https://trader-gui.${HOSTED_ZONE_NAME}"
      nginx.ingress.kubernetes.io/cors-allow-headers: "DNT, Keep-Alive, User-Agent, X-Requested-With, If-Modified-Since, Cache-Control, Content-Type, Range, Authorization, X-Project-Key"
      nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
      nginx.ingress.kubernetes.io/cors-allow-methods: "GET, PUT, POST, DELETE, PATCH, OPTIONS"
      nginx.ingress.kubernetes.io/cors-expose-headers: "*, X-Project-Key"
      nginx.ingress.kubernetes.io/cors-max-age: "1728000"
      nginx.ingress.kubernetes.io/enable-cors: "true"
    hosts:
      - host: trader-rapp-api.${HOSTED_ZONE_NAME}
        paths:
          - path: /
            pathType: Prefix
    tls: 
     - secretName: 5gzorro-wildcard-cert 
       hosts:
         - trader-rapp-api.${HOSTED_ZONE_NAME}
  identityPermissionsManagerEndpoint: "http://zorro5g-identity-and-permissions-manager-trader:8000/"
  radioControllerEndpoint: ""
  role: trader

legal-prose-repository-trader:
  # -- Enable 5GZORRO Legal Prose Repository
  enabled: true
  image:
    repository: ghcr.io/5gzorro/platform-automation/legal-prose-repository-api
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "5gzorro-full-1.0-pre-final"
  postgres:
    # -- PostgreSQL hostname (service name if it's in the same namespace, FQDN if NOT)
    host: zorro5g-psqldb-trader
    # -- PostgreSQL port
    port: 5432
    # -- PostgreSQL database name
    name: legalprosetrader
    # -- PostgreSQL secrets name (created manually or by custom-resource-5gzorro helm-chart, containing user credentials)
    existingSecret: "legalprosetrader.zorro5g-psqldb-trader.credentials.postgresql.acid.zalan.do"
    # -- PostgreSQL secret username key
    userKey: "username"
    # -- PostgreSQL secret password key
    passwordKey: "password"
  ingress:
    # -- Exposes the service outside the cluster using ingress
    enabled: true
    # -- Set ingress controller class
    className: "nginx"
    # -- Ingress annotation
    annotations: 
      #cert-manager.io/cluster-issuer: letsencrypt-prod
      helm.sh/resource-policy: keep
    hosts:
      # -- Domain used to expose the service outside the cluster
      - host: trader-lpr.${HOSTED_ZONE_NAME}
        paths:
          - path: /
            pathType: Prefix
    tls: 
    # -- Secret name that contain wildcard certificate 
     - secretName: 5gzorro-wildcard-cert #trader-lpr-letsencrypt-tls
       hosts:
         - trader-lpr.${HOSTED_ZONE_NAME}
  # -- Define component role/profile
  role: "trader"
  # -- URL of the Identity and Permissions Manager instance specific for this profile
  identityBaseUrl: "http://zorro5g-identity-and-permissions-manager-trader:8000"
  # -- URL of the Governance Manager instance specific for this profile
  governanceBaseUrl: "http://zorro5g-governance-manager-api-trader:8080/api/v1"
  callbacks:
    # -- URL for Legal Prose Template callback
    updateTemplateIdentity: "https://trader-lpr.${HOSTED_ZONE_NAME}/legal-prose-repository/api/v1/legal-prose-templates/%s/identity"

smart-contract-lifecycle-manager-trader:
  enabled: true
  image:
    repository: "ghcr.io/5gzorro/platform-automation/lifecycle-manager-api"
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "5gzorro-full-1.12-pre-final"
  postgres:
    host: zorro5g-psqldb-trader
    port: 5432
    name: sclmtrader
    existingSecret: "sclmtrader.zorro5g-psqldb-trader.credentials.postgresql.acid.zalan.do"
    userKey: "username"
    passwordKey: "password"
  ingress:
    enabled: true
    className: "nginx"
    annotations: 
      #cert-manager.io/cluster-issuer: letsencrypt-prod
      helm.sh/resource-policy: keep
    hosts:
      - host: trader-sclm.${HOSTED_ZONE_NAME}
        paths:
          - path: /
            pathType: Prefix
    tls: 
     - secretName: 5gzorro-wildcard-cert #trader-sclm-letsencrypt-tls
       hosts:
         - trader-sclm.${HOSTED_ZONE_NAME}
  role: "trader"
  identityBaseUrl: "http://zorro5g-identity-and-permissions-manager-trader:8000"
  governanceBaseUrl: "http://zorro5g-governance-manager-api-trader:8080/api/v1"
  callbacks:
    updateSlaIdentity: "https://trader-sclm.${HOSTED_ZONE_NAME}/smart-contract-lifecycle-manager/api/v1/service-level-agreement/%s/identity"
    updateAgreementIdentity: "https://trader-sclm.${HOSTED_ZONE_NAME}/smart-contract-lifecycle-manager/api/v1/agreement/%s/identity"
  corda:
    username: traderoperations           
    password: usera             
    host: trader.trader-ns.svc.cluster.local
    port: "10003"
  operatorName: operatorb
  hostname: "smart-contract-lifecycle-manager-trader:8087"

resource-and-service-offer-catalog-trader:
  enabled: true
  image:
    repository: "ghcr.io/5gzorro/platform-automation/resource-and-service-offer-catalog"
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "automation"
  operatorName: operatorb
  postgres:
    host: zorro5g-psqldb-trader
    port: 5432
    name: rsoctrader
    existingSecret: "rsoctrader.zorro5g-psqldb-trader.credentials.postgresql.acid.zalan.do"
    userKey: "username"
    passwordKey: "password"
  kafka:
    bootstrap: "kafka-cluster-kafka-bootstrap:9092"
    offeringsTopic: dlt-product-offerings
    ordersTopic: dlt-product-orders
  ingress:
    enabled: true
    className: "nginx"
    annotations: 
      #cert-manager.io/cluster-issuer: letsencrypt-prod
      helm.sh/resource-policy: keep
    hosts:
      - host: trader-rsoc.${HOSTED_ZONE_NAME}
        paths:
          - path: /
            pathType: Prefix
    tls: 
     - secretName: 5gzorro-wildcard-cert #trader-rsoc-letsencrypt-tls
       hosts:
         - trader-rsoc.${HOSTED_ZONE_NAME}
  role: "trader"
  did:
    host: "http://zorro5g-identity-and-permissions-manager-trader"
    port: "8000"
  lcm:
    host: "smart-contract-lifecycle-manager-trader"
    port: "8087"
    offerPath: "/product-offer/"
    orderPath: "/product_order/"
    issuePath: "/spectoken/derivative/issue"
    slaPath: "/api/v1/service-level-agreement/"
    skipPost: "false"
  srsd:
    host: "zorro5g-smart-resource-and-service-discovery-trader"
    port: "5000"
    requestPath: "/classifyOffer"
    skipPost: "false"
  hostname: "resource-and-service-offer-catalog-trader"

gui-trader:
  enabled: true
  image:
    repository: ghcr.io/5gzorro/platform-automation/gui
    tag: latest
    pullPolicy: Always
  ingress:
    enabled: true
    className: "nginx"
    annotations: 
      #cert-manager.io/cluster-issuer: letsencrypt-prod
      helm.sh/resource-policy: keep
    hosts:
      - host: trader-gui.${HOSTED_ZONE_NAME}
        paths:
          - path: /
            pathType: Prefix
    tls: 
     - secretName: 5gzorro-wildcard-cert #trader-gui-letsencrypt-tls
       hosts:
         - trader-gui.${HOSTED_ZONE_NAME}
  role: "trader"
  marketPlaceUrl: 'https://trader-rsoc.${HOSTED_ZONE_NAME}/tmf-api'
  legalProseUrl: 'https://trader-lpr.${HOSTED_ZONE_NAME}'
  governanceUrl: 'https://trader-gm.${HOSTED_ZONE_NAME}'
  identityPermissionsUrl: 'https://trader-idp.${HOSTED_ZONE_NAME}'
  smartContractUrl: 'https://trader-sclm.${HOSTED_ZONE_NAME}/smart-contract-lifecycle-manager/'
  resourceManagerEndpoint: 'https://trader-xrm.${HOSTED_ZONE_NAME}'
  resourceManagerDiscoveryApiKey: 'ce0b0017-843c-4811-bb76-1005733cf3ec'
  resourceManagerTraslatorApiKey: 'fe6d588b-1d6b-4954-9e26-a334d0d09eed'
  rappDiscoveryApiKey: 'fc7def3f-0490-4c17-931f-6f6e4c759890'
  sliceDiscoveryApiKey: '685be7dc-6ed3-46de-90da-bc21747568a1'
  ledgerIdentity: 'O=Trader,OU=Trader,L=London,C=GB'
  srsdUrl: 'https://trader-srsd.${HOSTED_ZONE_NAME}'
  issmUrl: 'https://trader-issm.${HOSTED_ZONE_NAME}'
  rappUrl: 'https://trader-rapp-api.${HOSTED_ZONE_NAME}'

smart-resource-and-service-discovery-trader:
  enabled: true
  image:
    repository: ghcr.io/5gzorro/platform-automation/srd-api
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "latest"
  ingress:
    enabled: true
    className: "nginx"
    annotations: 
      #cert-manager.io/cluster-issuer: letsencrypt-prod
      helm.sh/resource-policy: keep
    hosts:
      - host: trader-srsd.${HOSTED_ZONE_NAME}
        paths:
          - path: /
            pathType: Prefix
    tls: 
     - secretName: 5gzorro-wildcard-cert #trader-srsd-letsencrypt-tls
       hosts:
         - trader-srsd.${HOSTED_ZONE_NAME}
  mongo:
    uri: "mongodb-trader-admin-srsd"

monitoring-data-aggregator-trader:
  enabled: true
  image:
    repository: ghcr.io/5gzorro/platform-automation/mda
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "c7de045"
  postgres:
    host: zorro5g-psqldb-trader
    port: 5432
    name: mdatrader
    existingSecret: "mdatrader.zorro5g-psqldb-trader.credentials.postgresql.acid.zalan.do"
    userKey: "username"
    passwordKey: "password"
  ingress:
    enabled: false
  role: "trader"
  kafka:
    host: kafka-cluster-kafka-bootstrap
    port: 9092

xrm-trader:
  enabled: true
  role: "trader"
  ingress:
    enabled: true
    className: "nginx"
    annotations: 
      #cert-manager.io/cluster-issuer: letsencrypt-prod
      helm.sh/resource-policy: keep
    hosts:
      - host: trader-xrm.${HOSTED_ZONE_NAME}
        paths:
          - path: /
            pathType: Prefix
    tls: 
     - secretName: 5gzorro-wildcard-cert #consumer-idp-letsencrypt-tls
       hosts:
         - trader-xrm.${HOSTED_ZONE_NAME}
  catalogueapp: 
    image:
      repository: ghcr.io/5gzorro/platform-automation/xrm-catalogue-app
      pullPolicy: IfNotPresent
      tag: "fix3"
    postgres:
      host: zorro5g-psqldb-trader
      port: 5432
      name: xrmcatalogueapptrader
      existingSecret: "xrmcatalogueapptrader.zorro5g-psqldb-trader.credentials.postgresql.acid.zalan.do"
      userKey: "username"
      passwordKey: "password"
    mano:
      id: "ZORRO_OSMR10"
      type: "OSMR10"
      site: "ZORRO_OSM"
      ip: "osm.${HOSTED_ZONE_NAME}"
      port: "80"
      username: "admin"
      password: "admin"
      project: "trader"
    catalogue:
      id: "DEFAULT_CAT"
      url: "http://zorro5g-resource-and-service-offer-catalog-trader:8080"
  catalogueui:
    image:
      repository: ghcr.io/5gzorro/platform-automation/xrm-catalogue-gui
      pullPolicy: IfNotPresent
      tag: "latest"
    keycloak:
      enabled: false
    catalogue:
      port: "80"
      scope: "PUBLIC" 
  kafka:
    host: "kafka-cluster-kafka-bootstrap:9092"
  gateway:
    mongo:
      uri: "mongodb-trader-admin-xrm-trader"
  managementapi:
    mongo:
      uri: "mongodb-trader-admin-xrm-trader"
  translator:
    image:
      repository: ghcr.io/5gzorro/platform-automation/xrm-resource-definition-translator
      pullPolicy: IfNotPresent
      tag: "latest"
    postgres:
      host: zorro5g-psqldb-xrm-trader
      port: 5432
      name: xrmtranslatortrader
      existingSecret: "xrmtranslatortrader.zorro5g-psqldb-trader.credentials.postgresql.acid.zalan.do"
      userKey: "username"
      passwordKey: "password"

nsso-trader:
  enabled: true
  uiimage:
    repository: ghcr.io/5gzorro/platform-automation/nssoui
    tag: fix
    pullPolicy: Always
  image:
    repository: ghcr.io/5gzorro/platform-automation/nsso
    tag: latest
    pullPolicy: Always
  role: trader
  postgres:
    url: jdbc:postgresql://zorro5g-psqldb-trader:5432/nssotrader?sslmode=require
    existingSecret: "nssotrader.zorro5g-psqldb-trader.credentials.postgresql.acid.zalan.do"
    userKey: "username"
    passwordKey: "password"
  nfvo:
    catalogue:
      type: OSM10
      address: http://osm.${HOSTED_ZONE_NAME}
    lcm:
      type: OSM10
      address: http://osm.${HOSTED_ZONE_NAME}
      project: admin
      username: "admin"
      password: "admin"
  rabbitmq:
    host: zorro5g-nsso-trader-rabbitmq

trmf-trader:
  enabled: true
  image:
    tag: fix
    app: trmf
    repository: ghcr.io/5gzorro/platform-automation/trmf
    pullPolicy: Always
    pullSecrets: ""
  role: "trader"
  trmfdb:
    persistence:
      storageClassName: "default"
      size: 8Gi
  catalogue:
    uri: http://zorro5g-resource-and-service-offer-catalog-trader:8080/tmf-api/
  elk:
    uri: http://zorro5g-xrm-trader-elasticsearch:9200/
  datalake:
    kafka: kafka-cluster-kafka-bootstrap:9092

issm-trader:
  enabled: true 
  role: "trader"
  orchestrator: "nsso"
  operatorName: operatorc
  kafka:
    url: "kafka-cluster-kafka-bootstrap.default.svc.cluster.local"
    port: "9092"
  ingress:
    enabled: true
    className: "nginx"
    annotations: 
      #cert-manager.io/cluster-issuer: letsencrypt-prod
      helm.sh/resource-policy: keep
    hosts:
      - host: trader-issm.${HOSTED_ZONE_NAME}
        paths:
          - path: /
            pathType: Prefix
    tls: 
     - secretName: 5gzorro-wildcard-cert #consumer-idp-letsencrypt-tls
       hosts:
         - trader-issm.${HOSTED_ZONE_NAME}
  argo:
    internal: "zorro5g-argo-workflows-server.default.svc.cluster.local:2746"
    external: "https://argo.${HOSTED_ZONE_NAME}"
  api:
    image:
      repository: ghcr.io/5gzorro/platform-automation/issm-api
      pullPolicy: IfNotPresent
      # Overrides the image tag whose default is the chart appVersion.
      tag: "ffaf212"
  optimizer:
    image:
      repository: ghcr.io/5gzorro/platform-automation/issm-optimizer
      pullPolicy: IfNotPresent
      # Overrides the image tag whose default is the chart appVersion.
      tag: "temp"
######################## END Trader Profile Block ########################
######################## START Consumer Profile Block ########################
elma-consumer:
  enabled: true
  image:
    # -- Docker image tag
    tag: gitlab-ci
    app: elma
    # -- Docker image repository
    image: ghcr.io/5gzorro/platform-automation/elma
    # -- Image pull policy
    pullPolicy: Always
  role: consumer
  domainId: "consumer"
  catalog:
    url: "zorro5g-resource-and-service-offer-catalog-consumer"
    port: "8080"
    resources: "None"
  netSlice:
    url: "172.28.3.15"
    port: "31082"
    endpoint: "portal/elicensing/"
  datalake:
    url: "http://zorro5g-datalake:8080/datalake/v1/catalog/instance/{instance_id}"
    auth: '{"userInfo": {"userId": "operator-d", "authToken": "blah"}}'
    kafka: "kafka-cluster-kafka-bootstrap:9092"
  rabbitmq:
    url: "rabbitmq-elma-consumer"
    existingSecret: "rabbitmq-elma-consumer-default-user"
    userKey: "username"
    passwordKey: "password"

aries-cloudagent-consumer:
  enabled: true
  image:
    # -- Docker image repository
    repository: ghcr.io/5gzorro/platform-automation/aries-cloudagent
    # -- Image pull policy
    pullPolicy: IfNotPresent
    # -- Docker image tag
    # Overrides the image tag whose default is the chart appVersion.
    tag: "0.6.0"
  agent:
    role: "consumer"  # Admin, Regulator, Holder, Verifier
    label: "AgentVerifier" # AgentRegulator
    seed: "AgentVerifier0000000000000000000" # AgentRegulator00000000000000000
    did: "2ramRjDFUSwWnn4JJ5MDpC"
    walletName: "AgentVerifier" # AgentRegulator
    walletKey: "AgentVerifierKey" # secret
  vonUrl: "http://10.241.0.10:9000" # http://10.241.0.4:9000
  persistence:
    enabled: false
    # storageClassName: default
    accessModes:
      - ReadWriteOnce
    size: 16Gi

identity-and-permissions-manager-consumer:  # verifier
  enabled: true
  image:
    # -- Docker image repository
    repository: ghcr.io/5gzorro/platform-automation/identity-and-permissions-manager
    # -- Image pull policy
    pullPolicy: IfNotPresent
    # -- Docker image tag
    # Overrides the image tag whose default is the chart appVersion.
    tag: "latest"
  database:
    connectionString: "mongodb-consumer-admin-idp-consumer"
    port: ""
  ingress:
    enabled: true
    className: "nginx"
    annotations: 
      #cert-manager.io/cluster-issuer: letsencrypt-prod
      helm.sh/resource-policy: keep
    hosts:
      - host: consumer-idp.${HOSTED_ZONE_NAME}
        paths:
          - path: /
            pathType: Prefix
    tls: 
     - secretName: 5gzorro-wildcard-cert #consumer-idp-letsencrypt-tls
       hosts:
         - consumer-idp.${HOSTED_ZONE_NAME}
  idp:
    role: "consumer"
    whitelist: '["*"]'
    holderAgent: "http://zorro5g-aries-cloudagent-consumer:8001"
    issuerAgentUrl: "http://zorro5g-aries-cloudagent-consumer:8001"
    tradingProviderAgentControllerUrl: "http://zorro5g-identity-and-permissions-manager-consumer:8000"
    adminAgentControllerUrl: "http://zorro5g-identity-and-permissions-manager-admin:8000"
    regulatorAgentControllerUrl: "http://zorro5g-identity-and-permissions-manager-regulator:8000"
    otherIdpControllers: '["http://zorro5g-identity-and-permissions-manager-regulator:8000", "http://zorro5g-identity-and-permissions-manager-admin:8000", "http://zorro5g-identity-and-permissions-manager-consumer:8000" ]'
    key: ""
    vpnaasKey: ""

rapp-api-consumer:
  enabled: true
  image:
    # -- Docker image repository
    repository: ghcr.io/5gzorro/platform-automation/rapp-api
    # -- Image pull policy
    pullPolicy: IfNotPresent
    # -- Docker image tag
    # Overrides the image tag whose default is the chart appVersion.
    tag: "latest"
  database:
    connectionString: "mongodb-consumer-admin-rapp-api-consumer"
    port: ""
  ingress:
    enabled: true
    className: "nginx"
    annotations: 
      #cert-manager.io/cluster-issuer: letsencrypt-prod
      helm.sh/resource-policy: keep
      nginx.ingress.kubernetes.io/cors-allow-origin: "https://consumer-gui.${HOSTED_ZONE_NAME}"
      nginx.ingress.kubernetes.io/cors-allow-headers: "DNT, Keep-Alive, User-Agent, X-Requested-With, If-Modified-Since, Cache-Control, Content-Type, Range, Authorization, X-Project-Key"
      nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
      nginx.ingress.kubernetes.io/cors-allow-methods: "GET, PUT, POST, DELETE, PATCH, OPTIONS"
      nginx.ingress.kubernetes.io/cors-expose-headers: "*, X-Project-Key"
      nginx.ingress.kubernetes.io/cors-max-age: "1728000"
      nginx.ingress.kubernetes.io/enable-cors: "true"
    hosts:
      - host: consumer-rapp-api.${HOSTED_ZONE_NAME}
        paths:
          - path: /
            pathType: Prefix
    tls: 
     - secretName: 5gzorro-wildcard-cert 
       hosts:
         - consumer-rapp-api.${HOSTED_ZONE_NAME}
  identityPermissionsManagerEndpoint: "http://zorro5g-identity-and-permissions-manager-consumer:8000/"
  radioControllerEndpoint: ""
  role: consumer

smart-contract-lifecycle-manager-consumer:
  enabled: true
  image:
    repository: "ghcr.io/5gzorro/platform-automation/lifecycle-manager-api"
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "5gzorro-full-1.12-pre-final"
  postgres:
    host: zorro5g-psqldb-consumer
    port: 5432
    name: sclmconsumer
    existingSecret: "sclmconsumer.zorro5g-psqldb-consumer.credentials.postgresql.acid.zalan.do"
    userKey: "username"
    passwordKey: "password"
  ingress:
    enabled: true
    className: "nginx"
    annotations: 
      #cert-manager.io/cluster-issuer: letsencrypt-prod
      helm.sh/resource-policy: keep
    hosts:
      - host: consumer-sclm.${HOSTED_ZONE_NAME}
        paths:
          - path: /
            pathType: Prefix
    tls: 
     - secretName: 5gzorro-wildcard-cert #consumer-sclm-letsencrypt-tls
       hosts:
         - consumer-sclm.${HOSTED_ZONE_NAME}
  role: "consumer"
  identityBaseUrl: "http://zorro5g-identity-and-permissions-manager-consumer:8000"
  governanceBaseUrl: "http://zorro5g-governance-manager-api-consumer:8080/api/v1"
  callbacks:
    updateSlaIdentity: "https://consumer-sclm.${HOSTED_ZONE_NAME}/smart-contract-lifecycle-manager/api/v1/service-level-agreement/%s/identity"
    updateAgreementIdentity: "https://consumer-sclm.${HOSTED_ZONE_NAME}/smart-contract-lifecycle-manager/api/v1/agreement/%s/identity"
  corda:
    username: consumeroperations           
    password: usera             
    host: consumer.consumer-ns.svc.cluster.local
    port: "10003"
  operatorName: operatorc
  hostname: "smart-contract-lifecycle-manager-consumer:8087"

resource-and-service-offer-catalog-consumer:
  enabled: true
  image:
    repository: "ghcr.io/5gzorro/platform-automation/resource-and-service-offer-catalog"
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "automation"
  operatorName: operatorc
  postgres:
    host: zorro5g-psqldb-consumer
    port: 5432
    name: rsocconsumer
    existingSecret: "rsocconsumer.zorro5g-psqldb-consumer.credentials.postgresql.acid.zalan.do"
    userKey: "username"
    passwordKey: "password"
  kafka:
    bootstrap: "kafka-cluster-kafka-bootstrap:9092"
    offeringsTopic: dlt-product-offerings
    ordersTopic: dlt-product-orders
  ingress:
    enabled: true
    className: "nginx"
    annotations: 
      #cert-manager.io/cluster-issuer: letsencrypt-prod
      helm.sh/resource-policy: keep
    hosts:
      - host: consumer-rsoc.${HOSTED_ZONE_NAME}
        paths:
          - path: /
            pathType: Prefix
    tls: 
     - secretName: 5gzorro-wildcard-cert #consumer-rsoc-letsencrypt-tls
       hosts:
         - consumer-rsoc.${HOSTED_ZONE_NAME}
  role: "consumer"
  did:
    host: "http://zorro5g-identity-and-permissions-manager-consumer"
    port: "8000"
  lcm:
    host: "smart-contract-lifecycle-manager-consumer"
    port: "8087"
    offerPath: "/product-offer/"
    orderPath: "/product_order/"
    issuePath: "/spectoken/derivative/issue"
    slaPath: "/api/v1/service-level-agreement/"
    skipPost: "false"
  srsd:
    host: "zorro5g-smart-resource-and-service-discovery-consumer"
    port: "5000"
    requestPath: "/classifyOffer"
    skipPost: "false"
  hostname: "resource-and-service-offer-catalog-consumer"

gui-consumer:
  enabled: true
  image:
    repository: ghcr.io/5gzorro/platform-automation/gui
    tag: latest
    pullPolicy: Always
  ingress:
    enabled: true
    className: "nginx"
    annotations: 
      #cert-manager.io/cluster-issuer: letsencrypt-prod
      helm.sh/resource-policy: keep
    hosts:
      - host: consumer-gui.${HOSTED_ZONE_NAME}
        paths:
          - path: /
            pathType: Prefix
    tls: 
     - secretName: 5gzorro-wildcard-cert #consumer-gui-letsencrypt-tls
       hosts:
         - consumer-gui.${HOSTED_ZONE_NAME}
  role: "consumer"
  marketPlaceUrl: 'https://consumer-rsoc.${HOSTED_ZONE_NAME}/tmf-api'
  legalProseUrl: 'https://consumer-lpr.${HOSTED_ZONE_NAME}'
  governanceUrl: 'https://consumer-gm.${HOSTED_ZONE_NAME}'
  identityPermissionsUrl: 'https://consumer-idp.${HOSTED_ZONE_NAME}'
  smartContractUrl: 'https://consumer-sclm.${HOSTED_ZONE_NAME}/smart-contract-lifecycle-manager/'
  resourceManagerEndpoint: 'https://consumer-xrm.${HOSTED_ZONE_NAME}'
  resourceManagerDiscoveryApiKey: 'ce0b0017-843c-4811-bb76-1005733cf3ec'
  resourceManagerTraslatorApiKey: 'fe6d588b-1d6b-4954-9e26-a334d0d09eed'
  rappDiscoveryApiKey: 'fc7def3f-0490-4c17-931f-6f6e4c759890'
  sliceDiscoveryApiKey: '685be7dc-6ed3-46de-90da-bc21747568a1'
  ledgerIdentity: 'O=Consumer,OU=Consumer,L=New York,C=US'
  srsdUrl: 'https://consumer-srsd.${HOSTED_ZONE_NAME}'
  issmUrl: 'https://consumer-issm.${HOSTED_ZONE_NAME}'
  rappUrl: 'https://consumer-rapp-api.${HOSTED_ZONE_NAME}'

smart-resource-and-service-discovery-consumer:
  enabled: true
  image:
    repository: ghcr.io/5gzorro/platform-automation/srd-api
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "latest"
  ingress:
    enabled: true
    className: "nginx"
    annotations: 
      #cert-manager.io/cluster-issuer: letsencrypt-prod
      helm.sh/resource-policy: keep
    hosts:
      - host: consumer-srsd.${HOSTED_ZONE_NAME}
        paths:
          - path: /
            pathType: Prefix
    tls: 
     - secretName: 5gzorro-wildcard-cert #consumer-srsd-letsencrypt-tls
       hosts:
         - consumer-srsd.${HOSTED_ZONE_NAME}
  mongo:
    uri: "mongodb-consumer-admin-srsd"

monitoring-data-aggregator-consumer:
  enabled: true
  image:
    repository: ghcr.io/5gzorro/platform-automation/mda
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "c7de045"
  postgres:
    host: zorro5g-psqldb-consumer
    port: 5432
    name: mdaconsumer
    existingSecret: "mdaconsumer.zorro5g-psqldb-consumer.credentials.postgresql.acid.zalan.do"
    userKey: "username"
    passwordKey: "password"
  ingress:
    enabled: false
  role: "consumer"
  kafka:
    host: kafka-cluster-kafka-bootstrap
    port: 9092

xrm-consumer:
  enabled: true
  role: "consumer"
  ingress:
    enabled: true
    className: "nginx"
    annotations: 
      #cert-manager.io/cluster-issuer: letsencrypt-prod
      helm.sh/resource-policy: keep
    hosts:
      - host: consumer-xrm.${HOSTED_ZONE_NAME}
        paths:
          - path: /
            pathType: Prefix
    tls: 
     - secretName: 5gzorro-wildcard-cert #consumer-idp-letsencrypt-tls
       hosts:
         - consumer-xrm.${HOSTED_ZONE_NAME}
  catalogueapp: 
    image:
      repository: ghcr.io/5gzorro/platform-automation/xrm-catalogue-app
      pullPolicy: IfNotPresent
      tag: "fix3"
    postgres:
      host: zorro5g-psqldb-consumer
      port: 5432
      name: xrmcatalogueappconsumer
      existingSecret: "xrmcatalogueappconsumer.zorro5g-psqldb-consumer.credentials.postgresql.acid.zalan.do"
      userKey: "username"
      passwordKey: "password"
    mano:
      id: "ZORRO_OSMR10"
      type: "OSMR10"
      site: "ZORRO_OSM"
      ip: "osm.${HOSTED_ZONE_NAME}"
      port: "80"
      username: "admin"
      password: "admin"
      project: "consumer"
    catalogue:
      id: "DEFAULT_CAT"
      url: "http://zorro5g-resource-and-service-offer-catalog-consumer:8080"
  catalogueui:
    image:
      repository: ghcr.io/5gzorro/platform-automation/xrm-catalogue-gui
      pullPolicy: IfNotPresent
      tag: "latest"
    keycloak:
      enabled: false
    catalogue:
      port: "80"
      scope: "PUBLIC" 
  kafka:
    host: "kafka-cluster-kafka-bootstrap:9092"
  gateway:
    mongo:
      uri: "mongodb-consumer-admin-xrm-consumer"
  managementapi:
    mongo:
      uri: "mongodb-consumer-admin-xrm-consumer"
  translator:
    image:
      repository: ghcr.io/5gzorro/platform-automation/xrm-resource-definition-translator
      pullPolicy: IfNotPresent
      tag: "latest"
    postgres:
      host: zorro5g-psqldb-consumer
      port: 5432
      name: xrmtranslatorconsumer
      existingSecret: "xrmtranslatorconsumer.zorro5g-psqldb-consumer.credentials.postgresql.acid.zalan.do"
      userKey: "username"
      passwordKey: "password"

issm-consumer:
  enabled: true 
  role: "consumer"
  orchestrator: "nsso"
  operatorName: operatorb
  kafka:
    url: "kafka-cluster-kafka-bootstrap.default.svc.cluster.local"
    port: "9092"
  argo:
    internal: "zorro5g-argo-workflows-server.default.svc.cluster.local:2746"
    external: "https://argo.${HOSTED_ZONE_NAME}"
  ingress:
    enabled: true
    className: "nginx"
    annotations: 
      #cert-manager.io/cluster-issuer: letsencrypt-prod
      helm.sh/resource-policy: keep
    hosts:
      - host: consumer-issm.${HOSTED_ZONE_NAME}
        paths:
          - path: /
            pathType: Prefix
    tls: 
     - secretName: 5gzorro-wildcard-cert #consumer-idp-letsencrypt-tls
       hosts:
         - consumer-issm.${HOSTED_ZONE_NAME}
  api:
    image:
      repository: ghcr.io/5gzorro/platform-automation/issm-api
      pullPolicy: IfNotPresent
      # Overrides the image tag whose default is the chart appVersion.
      tag: "ffaf212"
  optimizer:
    image:
      repository: ghcr.io/5gzorro/platform-automation/issm-optimizer
      pullPolicy: IfNotPresent
      # Overrides the image tag whose default is the chart appVersion.
      tag: "temp"

trmf-consumer:
  enabled: true
  image:
    tag: fix
    app: trmf
    repository: ghcr.io/5gzorro/platform-automation/trmf
    pullPolicy: Always
    pullSecrets: ""
  role: "consumer"
  trmfdb:
    persistence:
      enabled: true
      storageClassName: "default"
      size: 8Gi
  catalogue:
    uri: http://zorro5g-resource-and-service-offer-catalog-consumer:8080/tmf-api/
  elk:
    uri: http://zorro5g-xrm-consumer-elasticsearch:9200/
  datalake:
    kafka: kafka-cluster-kafka-bootstrap:9092
######################## END Consumer Profile Block ########################