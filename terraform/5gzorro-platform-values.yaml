tags:
  base: true
  admin: false 
  aries: true
  trader: false
  regulator: false
  monitoring: false

global:
  imagePullSecrets: 
    - name: registry-credentials

external-dns:
  enabled: true
  provider: azure
  azure:
    resourceGroup: "5gzorro"
    tenantId: "11d1b7a3-5e92-4744-83dc-831a43e1f967"
    subscriptionId: "f8948095-f2ff-4dbd-aa56-d319a3c81cf1"
    useManagedIdentityExtension: true
  txtOwnerId: "external-dns"
  domainFilters: ["5gzorro.smartcommunitylab.it"]

vault:
  enabled: true
  ui:
    enabled: true
    serviceType: "LoadBalancer"
    serviceNodePort: null
    externalPort: 8200
  server:
    standalone:
      enabled: true
  injector:
    enabled: false

kube-prometheus-stack:
  enabled: false
  defaultRules:
    etcd: false
    kubeScheduler: false
  grafana:
    defaultDashboardsTimezone: Europe/Rome
    adminPassword: 5gzorro-metrics
  kubeControllerManager:
    enabled: false
  kubeEtcd:
    enabled: false
  kubeScheduler:
    enabled: false
  # prometheusOperator:
  #   logLevel: debug
  prometheus:
    prometheusSpec:
      serviceMonitorSelectorNilUsesHelmValues: false
      ruleSelectorNilUsesHelmValues: false
      podMonitorSelectorNilUsesHelmValues: false
      probeSelectorNilUsesHelmValues: false
      retention: 180d
      retentionSize: "30GB"
      storageSpec:
        volumeClaimTemplate:
          spec:
            storageClassName: managed-premium
            accessModes: ["ReadWriteOnce"]
            resources:
              requests:
                storage: 32Gi

loki-stack:
  enabled: true
  loki:
    enabled: true
    isDefault: true
    persistence:
      enabled: true
      accessModes:
      - ReadWriteOnce
      size: 32Gi
      annotations: {}
      subPath: "loki"
      storageClassName: managed-premium
    serviceMonitor:
      enabled: true
      prometheusRule:
        enabled: true
        rules: 
        #  Some examples from https://awesome-prometheus-alerts.grep.to/rules.html#loki
        - alert: LokiProcessTooManyRestarts
          expr: changes(process_start_time_seconds{job=~"loki"}[15m]) > 2
          for: 0m
          labels:
            severity: warning
          annotations:
            summary: Loki process too many restarts (instance {{ $labels.instance }})
            description: "A loki process had too many restarts (target {{ $labels.instance }})\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
        - alert: LokiRequestErrors
          expr: 100 * sum(rate(loki_request_duration_seconds_count{status_code=~"5.."}[1m])) by (namespace, job, route) / sum(rate(loki_request_duration_seconds_count[1m])) by (namespace, job, route) > 10
          for: 15m
          labels:
            severity: critical
          annotations:
            summary: Loki request errors (instance {{ $labels.instance }})
            description: "The {{ $labels.job }} and {{ $labels.route }} are experiencing errors\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
        - alert: LokiRequestPanic
          expr: sum(increase(loki_panic_total[10m])) by (namespace, job) > 0
          for: 5m
          labels:
            severity: critical
          annotations:
            summary: Loki request panic (instance {{ $labels.instance }})
            description: "The {{ $labels.job }} is experiencing {{ printf \"%.2f\" $value }}% increase of panics\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
        - alert: LokiRequestLatency
          expr: (histogram_quantile(0.99, sum(rate(loki_request_duration_seconds_bucket{route!~"(?i).*tail.*"}[5m])) by (le)))  > 1
          for: 5m
          labels:
            severity: critical
          annotations:
            summary: Loki request latency (instance {{ $labels.instance }})
            description: "The {{ $labels.job }} {{ $labels.route }} is experiencing {{ printf \"%.2f\" $value }}s 99th percentile latency\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
  promtail:
    enabled: true
    config:
      lokiAddress: http://{{ .Release.Name }}-loki:3100/loki/api/v1/push
    serviceMonitor:
      enabled: true

minio:
  enabled: false
  fullnameOverride: "minio"
  mode: standalone
  replicas: 1
  DeploymentUpdate:
    type: Recreate
  # rootUser: "zorro5g"
  # rootPassword: "zorro5g"
  resources:
    requests:
      memory: 2Gi
  persistence:
    enabled: true
    storageClass: ""
    accessModes: "ReadWriteOnce"
    size: 32Gi
  metrics:
    serviceMonitor:
      enabled: true

postgres-operator:
  enabled: true
  postgresqlClusters:
    - name: zorro5g-psqldb-legalprose-admin
      spec:
        teamId: zorro5g
        volume:
          size: 16Gi
          storageClass: "managed-premium"
        numberOfInstances: 1
        users:
          legalproseadmin:
            - superuser
            - createdb
        databases:
          legalproseadmin: legalproseadmin
        postgresql:
          version: "14"
    - name: zorro5g-psqldb-legalprose-regulator
      spec:
        teamId: zorro5g
        volume:
          size: 16Gi
          storageClass: "managed-premium"
        numberOfInstances: 1
        users:
          legalproseregulator:
            - superuser
            - createdb
        databases:
          legalproseregulator: legalproseregulator
        postgresql:
          version: "14"
    - name: zorro5g-psqldb-governancemanager-admin
      spec:
        teamId: zorro5g
        volume:
          size: 16Gi
          storageClass: "managed-premium"
        numberOfInstances: 1
        users:
          governancemanageradmin:
            - superuser
            - createdb
        databases:
          governancemanageradmin: governancemanageradmin
        postgresql:
          version: "14"
    - name: zorro5g-psqldb-governancemanager-regulator
      spec:
        teamId: zorro5g
        volume:
          size: 16Gi
          storageClass: "managed-premium"
        numberOfInstances: 1
        users:
          governancemanagerregulator:
            - superuser
            - createdb
        databases:
          governancemanagerregulator: governancemanagerregulator
        postgresql:
          version: "14"

strimzi:
  enabled: false
  watchAnyNamespace: true
  kafkaClusters:
    - name: kafka-cluster
      replicas: 3
      version: 3.2.0
      config:
        offsets.topic.replication.factor: 3
        transaction.state.log.replication.factor: 3
        transaction.state.log.min.isr: 2
        default.replication.factor: 3
        min.insync.replicas: 1
        inter.broker.protocol.version: "3.2"
      storage:
        type: jbod
        volumes:
        - id: 0
          type: persistent-claim
          size: 32Gi
          deleteClaim: false
        - id: 1
          type: persistent-claim
          size: 32Gi
          deleteClaim: false
      zookeeper:
        replicas: 3
        storage:
          type: persistent-claim
          size: 32Gi
  kafkaTopics:
    - name: test1
      clusterName: kafka-cluster
      spec:
        partitions: 3
        replicas: 1
    - name: test2
      clusterName: kafka-cluster
      spec:
        partitions: 3
        replicas: 1
        
community-operator-crds:
  enable: true

community-operator:
  enabled: true
  community-operator-crds:
    enabled: false
  mongodbClusters:
    - name: admin-operator
      replicas: 1
      version: "4.2.6"
      users:
        - name: admin
          db: admin
          passwordSecretRef: 
            name: admin-password
          roles:
            - name: readWrite
              db: administrator
            - name: readWrite
              db: provider
          scramCredentialsSecretName: admin-scram
    - name: trader-operator
      replicas: 1
      version: "4.2.6"
      users:
        - name: trader
          db: admin
          passwordSecretRef: 
            name: trader-operator-password
          roles:
            - name: readWrite
              db: provider
          scramCredentialsSecretName: trader-scram
    - name: regulator-operator
      replicas: 1
      version: "4.2.6"
      users:
        - name: regulator
          db: admin
          passwordSecretRef: 
            name: regulator-operator-password
          roles:
            - name: readWrite
              db: regulator
            - name: readWrite
              db: provider
          scramCredentialsSecretName: regulator-scram
    - name: consumer-operator
      replicas: 1
      version: "4.2.6"
      users:
        - name: consumer
          db: admin
          passwordSecretRef: 
            name: consumer-operator-password
          roles:
            - name: readWrite
              db: provider
          scramCredentialsSecretName: consumer-scram

redis:
  enabled: false
  architecture: standalone
  replica:
    replicaCount: 1
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true

argo-workflows:
  enabled: false
  controller:
    metricsConfig:
      enabled: true
    telemetryConfig:
      enabled: true
    serviceMonitor:
      enabled: true

governance-manager-api:
  enabled: false
  service:
    prefix: /zorro/governance
  postgres:
    username: postgres
    password: postgres
    name: postgres
    host: postgres
    existingSecret: ""
    userKey: ""
    passwordKey: ""
  identityBaseUrl: http://10.4.2.214:6800
  legalProseRepositoryBaseUrl: http://10.4.2.27/zorro/legal-prose-repository/api/v1
  callbacks:
    updateProposal: http://10.4.2.102/zorro/governance/api/v1/governance-actions/%s/identity
  dockerTag: v0.1.23

legal-prose-repository:
  enabled: false
  service:
    prefix: /zorro/legal-prose-repository
  postgres:
    username: postgres
    password: postgres
    name: postgres
    host: postgres
    existingSecret: ""
    userKey: ""
    passwordKey: ""
  identityBaseUrl: http://10.4.2.214:6800
  legalProseRepositoryBaseUrl: http://10.4.2.27/zorro/legal-prose-repository/api/v1
  callbacks:
     updateProposal: http://10.4.2.102/zorro/governance/api/v1/governance-actions/%s/identity
  dockerTag: v0.1.23

smart-contract-lifecycle-manager:
  enabled: false
  hostname: "172.28.3.6:31080/smart-contract-lifecycle-manager"
  dockerTag: "5gzorro-core-1.23-rc"
  postgres:
    username: postgres             
    password: postgres             
    name: operator_a_sclm
    existingSecret: ""
    userKey: ""
    passwordKey: ""
  identityBaseUrl: "http://172.28.3.153:6200"
  callbacks:
    updateSlaIdentity: "http://172.28.3.6:31080/smart-contract-lifecycle-manager/api/v1/service-level-agreement/%s/identity"
    updateAgreementIdentity: "http://172.28.3.6:31080/smart-contract-lifecycle-manager/api/v1/agreement/%s/identity"
  corda:
    username: operatoraoperations
    password: usera
    host: operatora.operatora-ns.svc.cluster.local
  operatorName: opa

elma:
  enabled: false
  image:
    tag: gitlab-ci
    namespace: domain-operator-a
    app: elma
    image: ghcr.io/5gzorro/elicensing-manager-agent/elma
    pullPolicy: Always
    pullSecrets: elmaregsecret
  elmarest:
    nodePort: 30880
  elmadb:
    nodePort: 30881
  rabbitmq:
    nodePort: 30882

monitoring-data-aggregator:
  enabled: false

resource-and-service-offer-catalog:
  enable: false

aries-cloudagent-admin:
  enable: true
  agent:
    role: "admin"  # Admin, Regulator, Holder, Verifier
    label: "AgentAdmin" # AgentRegulator
    seed: "AgentAdmin0000000000000000000000" # AgentRegulator00000000000000000
    did: "RGQ8DpoASL9rZZp69i7wJ8"
    walletName: "AgentAdmin" # AgentRegulator
    walletKey: "AgentAdminKey" # secret
  vonUrl: "http://10.241.0.10:9000" # http://10.241.0.4:9000
  persistence:
    enabled: false
    # storageClassName: default
    accessModes:
      - ReadWriteOnce
    size: 10Gi

aries-cloudagent-regulator:
  enable: true
  agent:
    role: "regulator"  # Admin, Regulator, Holder, Verifier
    label: "AgentRegualtor" # AgentRegulator
    seed: "AgentRegulator000000000000000000" # AgentRegulator00000000000000000
    did: "KhgK8deVdK93xbTqkVMzVs"
    walletName: "AgentRegualtor" # AgentRegulator
    walletKey: "AgentRegulatorKey" # secret
  vonUrl: "http://10.241.0.10:9000" # http://10.241.0.4:9000
  persistence:
    enabled: false
    # storageClassName: default
    accessModes:
      - ReadWriteOnce
    size: 10Gi

aries-cloudagent-holder:
  enable: true
  agent:
    role: "holder"  # Admin, Regulator, Holder, Verifier
    label: "AgentHolder" # AgentRegulator
    seed: "AgentHolder000000000000000000000" # AgentRegulator00000000000000000
    did: "5YhRzG3iwWi195vHuxMJPy"
    walletName: "AgentHolder" # AgentRegulator
    walletKey: "AgentHolderKey" # secret
  vonUrl: "http://10.241.0.10:9000" # http://10.241.0.4:9000
  persistence:
    enabled: false
    # storageClassName: default
    accessModes:
      - ReadWriteOnce
    size: 10Gi

aries-cloudagent-verifier:
  enable: true
  agent:
    role: "varifier"  # Admin, Regulator, Holder, Verifier
    label: "AgentVerifier" # AgentRegulator
    seed: "AgentVerifier0000000000000000000" # AgentRegulator00000000000000000
    did: "2ramRjDFUSwWnn4JJ5MDpC"
    walletName: "AgentVerifier" # AgentRegulator
    walletKey: "AgentVerifierKey" # secret
  vonUrl: "http://10.241.0.10:9000" # http://10.241.0.4:9000
  persistence:
    enabled: false
    # storageClassName: default
    accessModes:
      - ReadWriteOnce
    size: 10Gi


identity-and-permissions-manager-admin:
  enabled: true
  database:
    connectionString: "admin-operator-admin-admin"
    port: "27017"
  idp:
    role: "admin"
    whitelist: '["*"]'
    holderAgent: "http://zorro5g-aries-cloudagent-admin:8001"
    issuerAgentUrl: "http://zorro5g-aries-cloudagent-admin:8001"
    tradingProviderAgentControllerUrl: "http://identity-and-permissions-manager-trader:8000"
    regulatorAgentControllerUrl: "http://identity-and-permissions-manager-regulator:8000"
    otherIdpControllers: '["http://identity-and-permissions-manager-trader:8000", "http://identity-and-permissions-manager-regulator:8000", "http://identity-and-permissions-manager-consumer:8000"]'
    adminCatalogueUrl: "http://172.51.40.23:34080/tmf-api/adminOnboardHandler"
    key: ""
    vpnaasKey: ""

identity-and-permissions-manager-regulator:
  enabled: true
  database:
    connectionString: "regulator-operator-admin-regulator"
    port: ""
  idp:
    role: "regulator"
    whitelist: '["*"]'
    holderAgent: "http://zorro5g-aries-cloudagent-regulator:8001"
    issuerAgentUrl: "http://zorro5g-aries-cloudagent-regulator:8001"
    tradingProviderAgentControllerUrl: "http://identity-and-permissions-manager-trader:8000"
    adminAgentControllerUrl: "http://identity-and-permissions-manager-admin:8000"
    otherIdpControllers: '["http://identity-and-permissions-manager-trader:8000", "http://identity-and-permissions-manager-admin:8000", "http://identity-and-permissions-manager-consumer:8000" ]'
    key: ""
    vpnaasKey: ""

identity-and-permissions-manager-trader:
  enabled: true
  database:
    connectionString: "trader-operator-admin-trader"
    port: ""
  idp:
    role: "trader"
    whitelist: '["*"]'
    holderAgent: "http://zorro5g-aries-cloudagent-holder:8001"
    issuerAgentUrl: "http://zorro5g-aries-cloudagent-holder:8001"
    tradingProviderAgentControllerUrl: "http://identity-and-permissions-manager-trader:8000"
    adminAgentControllerUrl: "http://identity-and-permissions-manager-admin:8000"
    regulatorAgentControllerUrl: "http://identity-and-permissions-manager-regulator:8000"
    otherIdpControllers: '["http://identity-and-permissions-manager-regulator:8000", "http://identity-and-permissions-manager-admin:8000", "http://identity-and-permissions-manager-consumer:8000" ]'
    key: ""
    vpnaasKey: ""

identity-and-permissions-manager-consumer:
  enabled: true
  database:
    connectionString: "consumer-operator-admin-consumer"
    port: ""
  idp:
    role: "trader"
    whitelist: '["*"]'
    holderAgent: "http://zorro5g-aries-cloudagent-verifier:8001"
    issuerAgentUrl: "http://zorro5g-aries-cloudagent-verifier:8001"
    tradingProviderAgentControllerUrl: "http://identity-and-permissions-manager-trader:8000"
    adminAgentControllerUrl: "http://identity-and-permissions-manager-admin:8000"
    regulatorAgentControllerUrl: "http://identity-and-permissions-manager-regulator:8000"
    otherIdpControllers: '["http://identity-and-permissions-manager-regulator:8000", "http://identity-and-permissions-manager-admin:8000", "http://identity-and-permissions-manager-consumer:8000" ]'
    key: ""
    vpnaasKey: ""

governance-manager-api-admin:
  enabled: true
  postgres:
    host: zorro5g-psqldb-governancemanager-admin
    port: 5432
    name: governancemanageradmin
    existingSecret: "governancemanageradmin.zorro5g-psqldb-governancemanager-admin.credentials.postgresql.acid.zalan.do"
    userKey: "username"
    passwordKey: "password"
  role: "admin"
  identityBaseUrl: "http://zorro5g-identity-and-permissions-manager-admin:8000"
  legalProseRepositoryBaseUrl: "http://zorro5g-lagal-prose-repository-admin:8080/legal-prose-repository/api/v1"
  callbacks:
    updateProposal: "http://governance-manager-api-admin:8080/api/v1/governance-actions/%s/identity"

governance-manager-api-regulator:
  enabled: true
  postgres:
    host: zorro5g-psqldb-governancemanager-regulator
    port: 5432
    name: governancemanagerregulator
    existingSecret: "governancemanagerregulator.zorro5g-psqldb-governancemanager-regulator.credentials.postgresql.acid.zalan.do"
    userKey: "username"
    passwordKey: "password"
  role: "regulator"
  identityBaseUrl: "http://zorro5g-identity-and-permissions-manager-regulator:8000"
  legalProseRepositoryBaseUrl: "http://zorro5g-lagal-prose-repository-regulator:8080/legal-prose-repository/api/v1"
  callbacks:
    updateProposal: "http://governance-manager-api-regulator:8080/api/v1/governance-actions/%s/identity"

legal-prose-repository-admin:
  enabled: true
  postgres:
    host: zorro5g-psqldb-legalprose-admin
    port: 5432
    name: legalproseadmin
    existingSecret: "legalproseadmin.zorro5g-psqldb-legalprose-admin.credentials.postgresql.acid.zalan.do"
    userKey: "username"
    passwordKey: "password"
  role: "admin"
  identityBaseUrl: "http://zorro5g-identity-and-permissions-manager-admin:8000"
  governanceBaseUrl: "http://zorro5g-governance-manager-api-admin:8080/api/v1"
  callbacks:
    updateTemplateIdentity: "http://legal-prose-repository-admin:8080/legal-prose-repository/api/v1/legal-prose-templates/%s/identity"

legal-prose-repository-regulator:
  enabled: true
  postgres:
    host: zorro5g-psqldb-legalprose-regulator
    port: 5432
    name: legalproseregulator
    existingSecret: "legalproseregulator.zorro5g-psqldb-legalprose-regulator.credentials.postgresql.acid.zalan.do"
    userKey: "username"
    passwordKey: "password"
  role: "regulator"
  identityBaseUrl: "http://zorro5g-identity-and-permissions-manager-regulator:8000"
  governanceBaseUrl: "http://zorro5g-governance-manager-api-regulator:8080/api/v1"
  callbacks:
    updateTemplateIdentity: "http://legal-prose-repository-regulator:8080/legal-prose-repository/api/v1/legal-prose-templates/%s/identity"