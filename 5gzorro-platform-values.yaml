tags:
  base: true
  admin: true 
  aries: true
  trader: true
  regulator: true
  monitoring: true

global:
  imagePullSecrets: 
    - name: registry-credentials
  

ingress-nginx:
  enabled: true
  controller:
    service:
      annotations:
        external-dns.alpha.kubernetes.io/hostname: "*.5gzorro.smartcommunitylab.it"

cert-manager: 
  enabled: true
  namespace: cert-manager

custom-resource-5gzorro:
  enabled: true
  letsencrypt:
    email: sysadmin@smartcommunitylab.it
    azureDns:
      subscriptionID: f8948095-f2ff-4dbd-aa56-d319a3c81cf1
      resourceGroupName: 5gzorro
      hostedZoneName: 5gzorro.smartcommunitylab.it
      clientID: 
  kube-prometheus-stack:
    enabled: true
  community-operator:
    enabled: true
    community-operator-crds:
      enabled: false
    mongodbClusters:
      - name: mongodb-idp-admin
        replicas: 1
        version: "4.2.6"
        users:
          - name: admin
            db: admin
            passwordSecretRef: 
              name: admin-password
            roles:
              - name: readWrite
                db: administrator
              - name: readWrite
                db: provider
            scramCredentialsSecretName: 5gzorro-mongodb-idp-admin-scram
      - name: mongodb-idp-trader
        replicas: 1
        version: "4.2.6"
        users:
          - name: trader
            db: admin
            passwordSecretRef: 
              name: 5gzorro-mongodb-idp-trader-password
            roles:
              - name: readWrite
                db: provider
            scramCredentialsSecretName: 5gzorro-mongodb-idp-trader-scram
      - name: mongodb-idp-regulator
        replicas: 1
        version: "4.2.6"
        users:
          - name: regulator
            db: admin
            passwordSecretRef: 
              name: 5gzorro-mongodb-idp-regulator-password
            roles:
              - name: readWrite
                db: regulator
              - name: readWrite
                db: provider
            scramCredentialsSecretName: 5gzorro-mongodb-idp-regulator-scram
      - name: mongodb-idp-consumer
        replicas: 1
        version: "4.2.6"
        users:
          - name: consumer
            db: admin
            passwordSecretRef: 
              name: 5gzorro-mongodb-idp-consumer-password
            roles:
              - name: readWrite
                db: provider
            scramCredentialsSecretName: 5gzorro-mongodb-idp-consumer-scram
      - name: mongodb-srsd-admin
        replicas: 1
        version: "4.2.6"
        users:
          - name: srsd
            db: admin
            passwordSecretRef: 
              name: 5gzorro-mongodb-srsd-admin-password
            roles:
              - name: readWrite
                db: srsd
            scramCredentialsSecretName: 5gzorro-mongodb-srsd-admin-scram
      - name: mongodb-srsd-regulator
        replicas: 1
        version: "4.2.6"
        users:
          - name: srsd
            db: admin
            passwordSecretRef: 
              name: 5gzorro-mongodb-srsd-regulator-password
            roles:
              - name: readWrite
                db: srsd
            scramCredentialsSecretName: 5gzorro-mongodb-srsd-regulator-scram        
      - name: mongodb-srsd-trader
        replicas: 1
        version: "4.2.6"
        users:
          - name: srsd
            db: admin
            passwordSecretRef: 
              name: 5gzorro-mongodb-srsd-trader-password
            roles:
              - name: readWrite
                db: srsd
            scramCredentialsSecretName: 5gzorro-mongodb-srsd-trader-scram
      - name: mongodb-srsd-consumer
        replicas: 1
        version: "4.2.6"
        users:
          - name: srsd
            db: admin
            passwordSecretRef: 
              name: 5gzorro-mongodb-srsd-consumer-password
            roles:
              - name: readWrite
                db: srsd
            scramCredentialsSecretName: 5gzorro-mongodb-srsd-consumer-scram 
  strimzi:
    enabled: true
    kafkaClusters:
      - name: kafka-cluster
        replicas: 3
        version: 3.2.0
        config:
          offsets.topic.replication.factor: 3
          transaction.state.log.replication.factor: 3
          transaction.state.log.min.isr: 2
          default.replication.factor: 3
          min.insync.replicas: 1
          inter.broker.protocol.version: "3.2"
        storage:
          type: jbod
          volumes:
          - id: 0
            type: persistent-claim
            size: 32Gi
            deleteClaim: false
          - id: 1
            type: persistent-claim
            size: 32Gi
            deleteClaim: false
        zookeeper:
          replicas: 3
          storage:
            type: persistent-claim
            size: 32Gi
    kafkaTopics:
      - name: dlt-product-offerings
        clusterName: kafka-cluster
        spec:
          partitions: 3
          replicas: 1
      - name: dlt-product-order
        clusterName: kafka-cluster
        spec:
          partitions: 3
          replicas: 1
  postgres-operator:
    enabled: true
    postgresqlClusters:
      - name: zorro5g-psqldb-sclm-admin
        spec:
          teamId: zorro5g
          volume:
            size: 16Gi
            storageClass: "managed-premium"
          numberOfInstances: 1
          users:
            sclmadmin:
              - superuser
              - createdb
          databases:
            sclmadmin: sclmadmin
          postgresql:
            version: "14"
      - name: zorro5g-psqldb-sclm-regulator
        spec:
          teamId: zorro5g
          volume:
            size: 16Gi
            storageClass: "managed-premium"
          numberOfInstances: 1
          users:
            sclmregulator:
              - superuser
              - createdb
          databases:
            sclmregulator: sclmregulator
          postgresql:
            version: "14"
      - name: zorro5g-psqldb-sclm-consumer
        spec:
          teamId: zorro5g
          volume:
            size: 16Gi
            storageClass: "managed-premium"
          numberOfInstances: 1
          users:
            sclmconsumer:
              - superuser
              - createdb
          databases:
            sclmconsumer: sclmconsumer
          postgresql:
            version: "14"
      - name: zorro5g-psqldb-sclm-trader
        spec:
          teamId: zorro5g
          volume:
            size: 16Gi
            storageClass: "managed-premium"
          numberOfInstances: 1
          users:
            sclmtrader:
              - superuser
              - createdb
          databases:
            sclmtrader: sclmtrader
          postgresql:
            version: "14"
      - name: zorro5g-psqldb-legalprose-admin
        spec:
          teamId: zorro5g
          volume:
            size: 16Gi
            storageClass: "managed-premium"
          numberOfInstances: 1
          users:
            legalproseadmin:
              - superuser
              - createdb
          databases:
            legalproseadmin: legalproseadmin
          postgresql:
            version: "14"
      - name: zorro5g-psqldb-legalprose-regulator
        spec:
          teamId: zorro5g
          volume:
            size: 16Gi
            storageClass: "managed-premium"
          numberOfInstances: 1
          users:
            legalproseregulator:
              - superuser
              - createdb
          databases:
            legalproseregulator: legalproseregulator
          postgresql:
            version: "14"
      - name: zorro5g-psqldb-governancemanager-admin
        spec:
          teamId: zorro5g
          volume:
            size: 16Gi
            storageClass: "managed-premium"
          numberOfInstances: 1
          users:
            governancemanageradmin:
              - superuser
              - createdb
          databases:
            governancemanageradmin: governancemanageradmin
          postgresql:
            version: "14"
      - name: zorro5g-psqldb-governancemanager-regulator
        spec:
          teamId: zorro5g
          volume:
            size: 16Gi
            storageClass: "managed-premium"
          numberOfInstances: 1
          users:
            governancemanagerregulator:
              - superuser
              - createdb
          databases:
            governancemanagerregulator: governancemanagerregulator
          postgresql:
            version: "14"
      - name: zorro5g-psqldb-srsd-admin
        spec:
          teamId: zorro5g
          volume:
            size: 16Gi
            storageClass: "managed-premium"
          numberOfInstances: 1
          users:
            srsdadmin:
              - superuser
              - createdb
          databases:
            srsdadmin: srsdadmin
          postgresql:
            version: "14"
      - name: zorro5g-psqldb-srsd-regulator
        spec:
          teamId: zorro5g
          volume:
            size: 16Gi
            storageClass: "managed-premium"
          numberOfInstances: 1
          users:
            srsdregulator:
              - superuser
              - createdb
          databases:
            srsdregulator: srsdregulator
          postgresql:
            version: "14"
      - name: zorro5g-psqldb-srsd-consumer
        spec:
          teamId: zorro5g
          volume:
            size: 16Gi
            storageClass: "managed-premium"
          numberOfInstances: 1
          users:
            srsdconsumer:
              - superuser
              - createdb
          databases:
            srsdconsumer: srsdconsumer
          postgresql:
            version: "14"
      - name: zorro5g-psqldb-srsd-trader
        spec:
          teamId: zorro5g
          volume:
            size: 16Gi
            storageClass: "managed-premium"
          numberOfInstances: 1
          users:
            srsdtrader:
              - superuser
              - createdb
          databases:
            srsdtrader: srsdtrader
          postgresql:
            version: "14"
      - name: zorro5g-psqldb-rsoc-admin
        spec:
          teamId: zorro5g
          volume:
            size: 16Gi
            storageClass: "managed-premium"
          numberOfInstances: 1
          users:
            rsocadmin:
              - superuser
              - createdb
          databases:
            rsocadmin: rsocadmin
          postgresql:
            version: "14"
      - name: zorro5g-psqldb-rsoc-regulator
        spec:
          teamId: zorro5g
          volume:
            size: 16Gi
            storageClass: "managed-premium"
          numberOfInstances: 1
          users:
            rsocregulator:
              - superuser
              - createdb
          databases:
            rsocregulator: rsocregulator
          postgresql:
            version: "14"
      - name: zorro5g-psqldb-rsoc-consumer
        spec:
          teamId: zorro5g
          volume:
            size: 16Gi
            storageClass: "managed-premium"
          numberOfInstances: 1
          users:
            rsocconsumer:
              - superuser
              - createdb
          databases:
            rsocconsumer: rsocconsumer
          postgresql:
            version: "14"
      - name: zorro5g-psqldb-rsoc-trader
        spec:
          teamId: zorro5g
          volume:
            size: 16Gi
            storageClass: "managed-premium"
          numberOfInstances: 1
          users:
            rsoctrader:
              - superuser
              - createdb
          databases:
            rsoctrader: rsoctrader
          postgresql:
            version: "14"

external-dns:
  enabled: true
  provider: azure
  azure:
    resourceGroup: "5gzorro"
    tenantId: "11d1b7a3-5e92-4744-83dc-831a43e1f967"
    subscriptionId: "f8948095-f2ff-4dbd-aa56-d319a3c81cf1"
    useManagedIdentityExtension: true
  txtOwnerId: "external-dns"
  domainFilters: ["*.5gzorro.smartcommunitylab.it"]

rabbitmq-cluster-operator:
  enabled: true

kube-prometheus-stack:
  enabled: true
  defaultRules:
    etcd: false
    kubeScheduler: false
  grafana:
    defaultDashboardsTimezone: Europe/Rome
    adminPassword: 5gzorro-metrics
  kubeControllerManager:
    enabled: false
  kubeEtcd:
    enabled: false
  kubeScheduler:
    enabled: false
  # prometheusOperator:
  #   logLevel: debug
  prometheus:
    prometheusSpec:
      serviceMonitorSelectorNilUsesHelmValues: false
      ruleSelectorNilUsesHelmValues: false
      podMonitorSelectorNilUsesHelmValues: false
      probeSelectorNilUsesHelmValues: false
      retention: 180d
      retentionSize: "30GB"
      storageSpec:
        volumeClaimTemplate:
          spec:
            storageClassName: managed-premium
            accessModes: ["ReadWriteOnce"]
            resources:
              requests:
                storage: 32Gi

loki-stack:
  enabled: true
  loki:
    enabled: true
    isDefault: true
    persistence:
      enabled: true
      accessModes:
      - ReadWriteOnce
      size: 32Gi
      annotations: {}
      subPath: "loki"
      storageClassName: managed-premium
    serviceMonitor:
      enabled: true
      prometheusRule:
        enabled: true
        rules: 
        #  Some examples from https://awesome-prometheus-alerts.grep.to/rules.html#loki
        - alert: LokiProcessTooManyRestarts
          expr: changes(process_start_time_seconds{job=~"loki"}[15m]) > 2
          for: 0m
          labels:
            severity: warning
          annotations:
            summary: Loki process too many restarts (instance {{ $labels.instance }})
            description: "A loki process had too many restarts (target {{ $labels.instance }})\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
        - alert: LokiRequestErrors
          expr: 100 * sum(rate(loki_request_duration_seconds_count{status_code=~"5.."}[1m])) by (namespace, job, route) / sum(rate(loki_request_duration_seconds_count[1m])) by (namespace, job, route) > 10
          for: 15m
          labels:
            severity: critical
          annotations:
            summary: Loki request errors (instance {{ $labels.instance }})
            description: "The {{ $labels.job }} and {{ $labels.route }} are experiencing errors\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
        - alert: LokiRequestPanic
          expr: sum(increase(loki_panic_total[10m])) by (namespace, job) > 0
          for: 5m
          labels:
            severity: critical
          annotations:
            summary: Loki request panic (instance {{ $labels.instance }})
            description: "The {{ $labels.job }} is experiencing {{ printf \"%.2f\" $value }}% increase of panics\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
        - alert: LokiRequestLatency
          expr: (histogram_quantile(0.99, sum(rate(loki_request_duration_seconds_bucket{route!~"(?i).*tail.*"}[5m])) by (le)))  > 1
          for: 5m
          labels:
            severity: critical
          annotations:
            summary: Loki request latency (instance {{ $labels.instance }})
            description: "The {{ $labels.job }} {{ $labels.route }} is experiencing {{ printf \"%.2f\" $value }}s 99th percentile latency\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
  promtail:
    enabled: true
    config:
      lokiAddress: http://{{ .Release.Name }}-loki:3100/loki/api/v1/push
    serviceMonitor:
      enabled: true

minio:
  enabled: false
  fullnameOverride: "minio"
  mode: standalone
  replicas: 1
  DeploymentUpdate:
    type: Recreate
  # rootUser: "zorro5g"
  # rootPassword: "zorro5g"
  resources:
    requests:
      memory: 2Gi
  persistence:
    enabled: true
    storageClass: ""
    accessModes: "ReadWriteOnce"
    size: 32Gi
  metrics:
    serviceMonitor:
      enabled: true

postgres-operator:
  enabled: true

strimzi:
  enabled: true
  watchAnyNamespace: true
          
community-operator:
  enabled: true
  community-operator-crds:
    enabled: false

redis:
  enabled: false
  architecture: standalone
  replica:
    replicaCount: 1
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true

argo-workflows:
  enabled: false
  controller:
    metricsConfig:
      enabled: true
    telemetryConfig:
      enabled: true
    serviceMonitor:
      enabled: true

elma-core:
  enabled: false
  image:
    tag: gitlab-ci
    app: elma
    image: ghcr.io/5gzorro/elicensing-manager-agent/elma
    pullPolicy: Always
    pullSecrets: elmaregsecret
  elmarest:
    nodePort: 30880
  elmadb:
    nodePort: 30881
  rabbitmq:
    nodePort: 30882

elma-agent:
  enabled: false
  image:
    tag: gitlab-ci
    app: elma
    image: ghcr.io/5gzorro/elicensing-manager-agent/elma
    pullPolicy: Always
    pullSecrets: elmaregsecret
  elmarest:
    nodePort: 30880
  elmadb:
    nodePort: 30881
  rabbitmq:
    nodePort: 30882

monitoring-data-aggregator:
  enabled: false

aries-cloudagent-admin:
  enable: true
  agent:
    role: "admin"  # Admin, Regulator, Holder, Verifier
    label: "AgentAdmin" # AgentRegulator
    seed: "AgentAdmin0000000000000000000000" # AgentRegulator00000000000000000
    did: "RGQ8DpoASL9rZZp69i7wJ8"
    walletName: "AgentAdmin" # AgentRegulator
    walletKey: "AgentAdminKey" # secret
  vonUrl: "http://10.241.0.10:9000" # http://10.241.0.4:9000
  persistence:
    enabled: false
    # storageClassName: default
    accessModes:
      - ReadWriteOnce
    size: 10Gi

aries-cloudagent-regulator:
  enable: true
  agent:
    role: "regulator"  # Admin, Regulator, Holder, Verifier
    label: "AgentRegualtor" # AgentRegulator
    seed: "AgentRegulator000000000000000000" # AgentRegulator00000000000000000
    did: "KhgK8deVdK93xbTqkVMzVs"
    walletName: "AgentRegualtor" # AgentRegulator
    walletKey: "AgentRegulatorKey" # secret
  vonUrl: "http://10.241.0.10:9000" # http://10.241.0.4:9000
  persistence:
    enabled: false
    # storageClassName: default
    accessModes:
      - ReadWriteOnce
    size: 10Gi

aries-cloudagent-trader:
  enable: true
  agent:
    role: "trader"  # Admin, Regulator, Holder, Verifier
    label: "AgentHolder" # AgentRegulator
    seed: "AgentHolder000000000000000000000" # AgentRegulator00000000000000000
    did: "5YhRzG3iwWi195vHuxMJPy"
    walletName: "AgentHolder" # AgentRegulator
    walletKey: "AgentHolderKey" # secret
  vonUrl: "http://10.241.0.10:9000" # http://10.241.0.4:9000
  persistence:
    enabled: false
    # storageClassName: default
    accessModes:
      - ReadWriteOnce
    size: 10Gi

aries-cloudagent-consumer:
  enable: true
  agent:
    role: "consumer"  # Admin, Regulator, Holder, Verifier
    label: "AgentVerifier" # AgentRegulator
    seed: "AgentVerifier0000000000000000000" # AgentRegulator00000000000000000
    did: "2ramRjDFUSwWnn4JJ5MDpC"
    walletName: "AgentVerifier" # AgentRegulator
    walletKey: "AgentVerifierKey" # secret
  vonUrl: "http://10.241.0.10:9000" # http://10.241.0.4:9000
  persistence:
    enabled: false
    # storageClassName: default
    accessModes:
      - ReadWriteOnce
    size: 10Gi


identity-and-permissions-manager-admin:
  enabled: true
  database:
    connectionString: "mongodb-idp-admin-admin-admin"
    port: "27017"
  ingress:
    enabled: true
    className: "nginx"
    annotations: 
      #cert-manager.io/cluster-issuer: letsencrypt-prod
      helm.sh/resource-policy: keep
    hosts:
      - host: admin-idp.5gzorro.smartcommunitylab.it
        paths:
          - path: /
            pathType: Prefix
    tls: 
     - secretName: 5gzorro-wildcard-cert #admin-idp-letsencrypt-tls
       hosts:
         - admin-idp.5gzorro.smartcommunitylab.it
  idp:
    role: "admin"
    whitelist: '["*"]'
    holderAgent: "http://zorro5g-aries-cloudagent-admin:8001"
    issuerAgentUrl: "http://zorro5g-aries-cloudagent-admin:8001"
    tradingProviderAgentControllerUrl: "http://zorro5g-identity-and-permissions-manager-admin:8000"
    regulatorAgentControllerUrl: "http://zorro5g-identity-and-permissions-manager-regulator:8000"
    otherIdpControllers: '["http://zorro5g-identity-and-permissions-manager-trader:8000", "http://zorro5g-identity-and-permissions-manager-regulator:8000", "http://zorro5g-identity-and-permissions-manager-consumer:8000"]'
    adminCatalogueUrl: "http://zorro5g-resource-and-service-offer-catalog-admin:8080/tmf-api/onboardHandler"
    key: ""
    vpnaasKey: ""
    adminDid: "OD1ndI3xw0Pi6Sl4rgoa6F"

identity-and-permissions-manager-regulator:
  enabled: true
  database:
    connectionString: "mongodb-idp-regulator-admin-regulator"
    port: ""
  ingress:
    enabled: true
    className: "nginx"
    annotations: 
      #cert-manager.io/cluster-issuer: letsencrypt-prod
      helm.sh/resource-policy: keep
    hosts:
      - host: regulator-idp.5gzorro.smartcommunitylab.it
        paths:
          - path: /
            pathType: Prefix
    tls: 
     - secretName: 5gzorro-wildcard-cert #regulator-idp-letsencrypt-tls
       hosts:
         - regulator-idp.5gzorro.smartcommunitylab.it
  idp:
    role: "regulator"
    whitelist: '["*"]'
    holderAgent: "http://zorro5g-aries-cloudagent-regulator:8001"
    issuerAgentUrl: "http://zorro5g-aries-cloudagent-regulator:8001"
    tradingProviderAgentControllerUrl: "http://zorro5g-identity-and-permissions-manager-regulator:8000"
    adminAgentControllerUrl: "http://zorro5g-identity-and-permissions-manager-admin:8000"
    otherIdpControllers: '["http://zorro5g-identity-and-permissions-manager-trader:8000", "http://zorro5g-identity-and-permissions-manager-admin:8000", "http://zorro5g-identity-and-permissions-manager-consumer:8000" ]'
    key: ""
    vpnaasKey: ""

identity-and-permissions-manager-trader: # holder
  enabled: true
  database:
    connectionString: "mongodb-idp-trader-admin-trader"
    port: ""
  ingress:
    enabled: true
    className: "nginx"
    annotations: 
      #cert-manager.io/cluster-issuer: letsencrypt-prod
      helm.sh/resource-policy: keep
    hosts:
      - host: trader-idp.5gzorro.smartcommunitylab.it
        paths:
          - path: /
            pathType: Prefix
    tls: 
     - secretName: 5gzorro-wildcard-cert #trader-idp-letsencrypt-tls
       hosts:
         - trader-idp.5gzorro.smartcommunitylab.it
  idp:
    role: "trader"
    whitelist: '["*"]'
    holderAgent: "http://zorro5g-aries-cloudagent-trader:8001"
    issuerAgentUrl: "http://zorro5g-aries-cloudagent-trader:8001"
    tradingProviderAgentControllerUrl: "http://zorro5g-identity-and-permissions-manager-trader:8000"
    adminAgentControllerUrl: "http://zorro5g-identity-and-permissions-manager-admin:8000"
    regulatorAgentControllerUrl: "http://zorro5g-identity-and-permissions-manager-regulator:8000"
    otherIdpControllers: '["http://zorro5g-identity-and-permissions-manager-regulator:8000", "http://zorro5g-identity-and-permissions-manager-admin:8000", "http://zorro5g-identity-and-permissions-manager-consumer:8000" ]'
    key: ""
    vpnaasKey: ""

identity-and-permissions-manager-consumer:  # verifier
  enabled: true
  database:
    connectionString: "mongodb-idp-consumer-admin-consumer"
    port: ""
  ingress:
    enabled: true
    className: "nginx"
    annotations: 
      #cert-manager.io/cluster-issuer: letsencrypt-prod
      helm.sh/resource-policy: keep
    hosts:
      - host: consumer-idp.5gzorro.smartcommunitylab.it
        paths:
          - path: /
            pathType: Prefix
    tls: 
     - secretName: 5gzorro-wildcard-cert #consumer-idp-letsencrypt-tls
       hosts:
         - consumer-idp.5gzorro.smartcommunitylab.it
  idp:
    role: "consumer"
    whitelist: '["*"]'
    holderAgent: "http://zorro5g-aries-cloudagent-consumer:8001"
    issuerAgentUrl: "http://zorro5g-aries-cloudagent-consumer:8001"
    tradingProviderAgentControllerUrl: "http://zorro5g-identity-and-permissions-manager-consumer:8000"
    adminAgentControllerUrl: "http://zorro5g-identity-and-permissions-manager-admin:8000"
    regulatorAgentControllerUrl: "http://zorro5g-identity-and-permissions-manager-regulator:8000"
    otherIdpControllers: '["http://zorro5g-identity-and-permissions-manager-regulator:8000", "http://zorro5g-identity-and-permissions-manager-admin:8000", "http://zorro5g-identity-and-permissions-manager-consumer:8000" ]'
    key: ""
    vpnaasKey: ""

governance-manager-api-admin:
  enabled: true
  postgres:
    host: zorro5g-psqldb-governancemanager-admin
    port: 5432
    name: governancemanageradmin
    existingSecret: "governancemanageradmin.zorro5g-psqldb-governancemanager-admin.credentials.postgresql.acid.zalan.do"
    userKey: "username"
    passwordKey: "password"
  ingress:
    enabled: true
    className: "nginx"
    annotations: 
      #cert-manager.io/cluster-issuer: letsencrypt-prod
      helm.sh/resource-policy: keep
    hosts:
      - host: admin-gm.5gzorro.smartcommunitylab.it
        paths:
          - path: /
            pathType: Prefix
    tls: 
     - secretName: 5gzorro-wildcard-cert #admin-gm-letsencrypt-tls
       hosts:
         - admin-gm.5gzorro.smartcommunitylab.it
  role: "admin"
  identityBaseUrl: "http://zorro5g-identity-and-permissions-manager-admin:8000"
  legalProseRepositoryBaseUrl: "http://zorro5g-lagal-prose-repository-admin:8080/legal-prose-repository/api/v1"
  callbacks:
    updateProposal: "https://admin-gm.5gzorro.smartcommunitylab.it/api/v1/governance-actions/%s/identity"

governance-manager-api-regulator:
  enabled: true
  postgres:
    host: zorro5g-psqldb-governancemanager-regulator
    port: 5432
    name: governancemanagerregulator
    existingSecret: "governancemanagerregulator.zorro5g-psqldb-governancemanager-regulator.credentials.postgresql.acid.zalan.do"
    userKey: "username"
    passwordKey: "password"
  ingress:
    enabled: true
    className: "nginx"
    annotations: 
      #cert-manager.io/cluster-issuer: letsencrypt-prod
      helm.sh/resource-policy: keep
    hosts:
      - host: regulator-gm.5gzorro.smartcommunitylab.it
        paths:
          - path: /
            pathType: Prefix
    tls: 
     - secretName: 5gzorro-wildcard-cert #regulator-gm-letsencrypt-tls
       hosts:
         - regulator-gm.5gzorro.smartcommunitylab.it
  role: "regulator"
  identityBaseUrl: "http://zorro5g-identity-and-permissions-manager-regulator:8000"
  legalProseRepositoryBaseUrl: "http://zorro5g-lagal-prose-repository-regulator:8080/legal-prose-repository/api/v1"
  callbacks:
    updateProposal: "https://regulator-gm.5gzorro.smartcommunitylab.it/api/v1/governance-actions/%s/identity"

legal-prose-repository-admin:
  enabled: true
  postgres:
    host: zorro5g-psqldb-legalprose-admin
    port: 5432
    name: legalproseadmin
    existingSecret: "legalproseadmin.zorro5g-psqldb-legalprose-admin.credentials.postgresql.acid.zalan.do"
    userKey: "username"
    passwordKey: "password"
  ingress:
    enabled: true
    className: "nginx"
    annotations: 
      #cert-manager.io/cluster-issuer: letsencrypt-prod
      helm.sh/resource-policy: keep
    hosts:
      - host: admin-lpr.5gzorro.smartcommunitylab.it
        paths:
          - path: /
            pathType: Prefix
    tls: 
     - secretName: 5gzorro-wildcard-cert #admin-lpr-letsencrypt-tls
       hosts:
         - admin-lpr.5gzorro.smartcommunitylab.it
  role: "admin"
  identityBaseUrl: "http://zorro5g-identity-and-permissions-manager-admin:8000"
  governanceBaseUrl: "http://zorro5g-governance-manager-api-admin:8080/api/v1"
  callbacks:
    updateTemplateIdentity: "https://admin-lpr.5gzorro.smartcommunitylab.it/legal-prose-repository/api/v1/legal-prose-templates/%s/identity"

legal-prose-repository-regulator:
  enabled: true
  postgres:
    host: zorro5g-psqldb-legalprose-regulator
    port: 5432
    name: legalproseregulator
    existingSecret: "legalproseregulator.zorro5g-psqldb-legalprose-regulator.credentials.postgresql.acid.zalan.do"
    userKey: "username"
    passwordKey: "password"
  ingress:
    enabled: true
    className: "nginx"
    annotations: 
      #cert-manager.io/cluster-issuer: letsencrypt-prod
      helm.sh/resource-policy: keep
    hosts:
      - host: regulator-lpr.5gzorro.smartcommunitylab.it
        paths:
          - path: /
            pathType: Prefix
    tls: 
     - secretName: 5gzorro-wildcard-cert #regulator-lpr-letsencrypt-tls
       hosts:
         - regulator-lpr.5gzorro.smartcommunitylab.it
  role: "regulator"
  identityBaseUrl: "http://zorro5g-identity-and-permissions-manager-regulator:8000"
  governanceBaseUrl: "http://zorro5g-governance-manager-api-regulator:8080/api/v1"
  callbacks:
    updateTemplateIdentity: "https://regulator-lpr.5gzorro.smartcommunitylab.it/legal-prose-repository/api/v1/legal-prose-templates/%s/identity"


smart-contract-lifecycle-manager-admin:
  enabled: true
  postgres:
    host: zorro5g-psqldb-sclm-admin
    port: 5432
    name: sclmadmin
    existingSecret: "sclmadmin.zorro5g-psqldb-sclm-admin.credentials.postgresql.acid.zalan.do"
    userKey: "username"
    passwordKey: "password"
  ingress:
    enabled: true
    className: "nginx"
    annotations: 
      #cert-manager.io/cluster-issuer: letsencrypt-prod
      helm.sh/resource-policy: keep
    hosts:
      - host: admin-sclm.5gzorro.smartcommunitylab.it
        paths:
          - path: /
            pathType: Prefix
    tls: 
     - secretName: 5gzorro-wildcard-cert #admin-sclm-letsencrypt-tls
       hosts:
         - admin-sclm.5gzorro.smartcommunitylab.it
  role: "admin"
  identityBaseUrl: "http://zorro5g-identity-and-permissions-manager-admin:8000"
  governanceBaseUrl: "http://zorro5g-governance-manager-api-admin:8080/api/v1"
  callbacks:
    updateSlaIdentity: "https://admin-sclm.5gzorro.smartcommunitylab.it/smart-contract-lifecycle-manager/api/v1/service-level-agreement/%s/identity"
    updateAgreementIdentity: "https://admin-sclm.5gzorro.smartcommunitylab.it/smart-contract-lifecycle-manager/api/v1/agreement/%s/identity"
  corda:
    username: user1           
    password: test             
    host: 10.241.0.10
    port: "10012"
  operatorName: operatora
  hostname: "smart-contract-lifecycle-manager-admin:8087"

smart-contract-lifecycle-manager-regulator:
  enabled: true
  postgres:
    host: zorro5g-psqldb-sclm-regulator
    port: 5432
    name: sclmregulator
    existingSecret: "sclmregulator.zorro5g-psqldb-sclm-regulator.credentials.postgresql.acid.zalan.do"
    userKey: "username"
    passwordKey: "password"
  ingress:
    enabled: true
    className: "nginx"
    annotations: 
      #cert-manager.io/cluster-issuer: letsencrypt-prod
      helm.sh/resource-policy: keep
    hosts:
      - host: regulator-sclm.5gzorro.smartcommunitylab.it
        paths:
          - path: /
            pathType: Prefix
    tls: 
     - secretName: 5gzorro-wildcard-cert #regulator-sclm-letsencrypt-tls
       hosts:
         - regulator-sclm.5gzorro.smartcommunitylab.it
  role: "regulator"
  identityBaseUrl: "http://zorro5g-identity-and-permissions-manager-regulator:8000"
  governanceBaseUrl: "http://zorro5g-governance-manager-api-regulator:8080/api/v1"
  callbacks:
    updateSlaIdentity: "https://regulator-sclm.5gzorro.smartcommunitylab.it/smart-contract-lifecycle-manager/api/v1/service-level-agreement/%s/identity"
    updateAgreementIdentity: "https://regulator-sclm.5gzorro.smartcommunitylab.it/smart-contract-lifecycle-manager/api/v1/agreement/%s/identity"
  corda:
    username: user1           
    password: test             
    host: 10.241.0.10
    port: "10015"
  operatorName: regualtora
  hostname: "smart-contract-lifecycle-manager-regulator:8087"

smart-contract-lifecycle-manager-consumer:
  enabled: true
  postgres:
    host: zorro5g-psqldb-sclm-consumer
    port: 5432
    name: sclmconsumer
    existingSecret: "sclmconsumer.zorro5g-psqldb-sclm-consumer.credentials.postgresql.acid.zalan.do"
    userKey: "username"
    passwordKey: "password"
  ingress:
    enabled: true
    className: "nginx"
    annotations: 
      #cert-manager.io/cluster-issuer: letsencrypt-prod
      helm.sh/resource-policy: keep
    hosts:
      - host: consumer-sclm.5gzorro.smartcommunitylab.it
        paths:
          - path: /
            pathType: Prefix
    tls: 
     - secretName: 5gzorro-wildcard-cert #consumer-sclm-letsencrypt-tls
       hosts:
         - consumer-sclm.5gzorro.smartcommunitylab.it
  role: "consumer"
  identityBaseUrl: "http://zorro5g-identity-and-permissions-manager-consumer:8000"
  governanceBaseUrl: "http://zorro5g-governance-manager-api-consumer:8080/api/v1"
  callbacks:
    updateSlaIdentity: "https://consumer-sclm.5gzorro.smartcommunitylab.it/smart-contract-lifecycle-manager/api/v1/service-level-agreement/%s/identity"
    updateAgreementIdentity: "https://consumer-sclm.5gzorro.smartcommunitylab.it/smart-contract-lifecycle-manager/api/v1/agreement/%s/identity"
  corda:
    username: user1           
    password: test             
    host: 10.241.0.10
    port: "10006"
  operatorName: operatorc
  hostname: "smart-contract-lifecycle-manager-consumer:8087"

smart-contract-lifecycle-manager-trader:
  enabled: true
  postgres:
    host: zorro5g-psqldb-sclm-trader
    port: 5432
    name: sclmtrader
    existingSecret: "sclmtrader.zorro5g-psqldb-sclm-trader.credentials.postgresql.acid.zalan.do"
    userKey: "username"
    passwordKey: "password"
  ingress:
    enabled: true
    className: "nginx"
    annotations: 
      #cert-manager.io/cluster-issuer: letsencrypt-prod
      helm.sh/resource-policy: keep
    hosts:
      - host: trader-sclm.5gzorro.smartcommunitylab.it
        paths:
          - path: /
            pathType: Prefix
    tls: 
     - secretName: 5gzorro-wildcard-cert #trader-sclm-letsencrypt-tls
       hosts:
         - trader-sclm.5gzorro.smartcommunitylab.it
  role: "trader"
  identityBaseUrl: "http://zorro5g-identity-and-permissions-manager-trader:8000"
  governanceBaseUrl: "http://zorro5g-governance-manager-api-trader:8080/api/v1"
  callbacks:
    updateSlaIdentity: "https://trader-sclm.5gzorro.smartcommunitylab.it/smart-contract-lifecycle-manager/api/v1/service-level-agreement/%s/identity"
    updateAgreementIdentity: "https://trader-sclm.5gzorro.smartcommunitylab.it/smart-contract-lifecycle-manager/api/v1/agreement/%s/identity"
  corda:
    username: user1           
    password: test             
    host: 10.241.0.10
    port: "10009"
  operatorName: operatorb
  hostname: "smart-contract-lifecycle-manager-trader:8087"

resource-and-service-offer-catalog-admin:
  enable: true
  operatorName: operatora
  postgres:
    host: zorro5g-psqldb-rsoc-admin
    port: 5432
    name: rsocadmin
    existingSecret: "rsocadmin.zorro5g-psqldb-rsoc-admin.credentials.postgresql.acid.zalan.do"
    userKey: "username"
    passwordKey: "password"
  kafka:
    bootstrap: "kafka-cluster-kafka-bootstrap:9092"
    offeringsTopic: dlt-product-offerings
    ordersTopic: dlt-product-orders
  ingress:
    enabled: true
    className: "nginx"
    annotations: 
      #cert-manager.io/cluster-issuer: letsencrypt-prod
      helm.sh/resource-policy: keep
    hosts:
      - host: admin-rsoc.5gzorro.smartcommunitylab.it
        paths:
          - path: /
            pathType: Prefix
    tls: 
     - secretName: 5gzorro-wildcard-cert #admin-rsoc-letsencrypt-tls
       hosts:
         - admin-rsoc.5gzorro.smartcommunitylab.it
  role: "admin"
  did:
    host: "http://zorro5g-identity-and-permissions-manager-admin"
    port: "8000"
  lcm:
    host: "smart-contract-lifecycle-manager-admin"
    port: "8087"
    offerPath: "/product-offer/"
    orderPath: "/product_order/"
    issuePath: "/spectoken/derivative/issue"
    slaPath: "/api/v1/service-level-agreement/"
    skipPost: "false"
  srsd:
    host: "zorro5g-smart-resource-and-service-discovery-admin"
    port: "5000"
    requestPath: "/classifyOffer"
    skipPost: "false"
  hostname: "resource-and-service-offer-catalog-admin"

resource-and-service-offer-catalog-regulator:
  enable: true
  operatorName: regulatora
  postgres:
    host: zorro5g-psqldb-rsoc-regulator
    port: 5432
    name: rsocregulator
    existingSecret: "rsocregulator.zorro5g-psqldb-rsoc-regulator.credentials.postgresql.acid.zalan.do"
    userKey: "username"
    passwordKey: "password"
  kafka:
    bootstrap: "kafka-cluster-kafka-bootstrap:9092"
    offeringsTopic: dlt-product-offerings
    ordersTopic: dlt-product-orders
  ingress:
    enabled: true
    className: "nginx"
    annotations: 
      #cert-manager.io/cluster-issuer: letsencrypt-prod
      helm.sh/resource-policy: keep
    hosts:
      - host: regulator-rsoc.5gzorro.smartcommunitylab.it
        paths:
          - path: /
            pathType: Prefix
    tls: 
     - secretName: 5gzorro-wildcard-cert #regulator-rsoc-letsencrypt-tls
       hosts:
         - regulator-rsoc.5gzorro.smartcommunitylab.it
  role: "regulator"
  did:
    host: "http://zorro5g-identity-and-permissions-manager-regulator"
    port: "8000"
  lcm:
    host: "smart-contract-lifecycle-manager-regulator"
    port: "8087"
    offerPath: "/product-offer/"
    orderPath: "/product_order/"
    issuePath: "/spectoken/derivative/issue"
    slaPath: "/api/v1/service-level-agreement/"
    skipPost: "false"
  srsd:
    host: "zorro5g-smart-resource-and-service-discovery-regulator"
    port: "5000"
    requestPath: "/classifyOffer"
    skipPost: "false"
  hostname: "resource-and-service-offer-catalog-regulator"

resource-and-service-offer-catalog-trader:
  enable: true
  operatorName: operatorb
  postgres:
    host: zorro5g-psqldb-rsoc-trader
    port: 5432
    name: rsoctrader
    existingSecret: "rsoctrader.zorro5g-psqldb-rsoc-trader.credentials.postgresql.acid.zalan.do"
    userKey: "username"
    passwordKey: "password"
  kafka:
    bootstrap: "kafka-cluster-kafka-bootstrap:9092"
    offeringsTopic: dlt-product-offerings
    ordersTopic: dlt-product-orders
  ingress:
    enabled: true
    className: "nginx"
    annotations: 
      #cert-manager.io/cluster-issuer: letsencrypt-prod
      helm.sh/resource-policy: keep
    hosts:
      - host: trader-rsoc.5gzorro.smartcommunitylab.it
        paths:
          - path: /
            pathType: Prefix
    tls: 
     - secretName: 5gzorro-wildcard-cert #trader-rsoc-letsencrypt-tls
       hosts:
         - trader-rsoc.5gzorro.smartcommunitylab.it
  role: "trader"
  did:
    host: "http://zorro5g-identity-and-permissions-manager-trader"
    port: "8000"
  lcm:
    host: "smart-contract-lifecycle-manager-trader"
    port: "8087"
    offerPath: "/product-offer/"
    orderPath: "/product_order/"
    issuePath: "/spectoken/derivative/issue"
    slaPath: "/api/v1/service-level-agreement/"
    skipPost: "false"
  srsd:
    host: "zorro5g-smart-resource-and-service-discovery-trader"
    port: "5000"
    requestPath: "/classifyOffer"
    skipPost: "false"
  hostname: "resource-and-service-offer-catalog-trader"

resource-and-service-offer-catalog-consumer:
  enable: true
  operatorName: operatorc
  postgres:
    host: zorro5g-psqldb-rsoc-consumer
    port: 5432
    name: rsocconsumer
    existingSecret: "rsocconsumer.zorro5g-psqldb-rsoc-consumer.credentials.postgresql.acid.zalan.do"
    userKey: "username"
    passwordKey: "password"
  kafka:
    bootstrap: "kafka-cluster-kafka-bootstrap:9092"
    offeringsTopic: dlt-product-offerings
    ordersTopic: dlt-product-orders
  ingress:
    enabled: true
    className: "nginx"
    annotations: 
      #cert-manager.io/cluster-issuer: letsencrypt-prod
      helm.sh/resource-policy: keep
    hosts:
      - host: consumer-rsoc.5gzorro.smartcommunitylab.it
        paths:
          - path: /
            pathType: Prefix
    tls: 
     - secretName: 5gzorro-wildcard-cert #consumer-rsoc-letsencrypt-tls
       hosts:
         - consumer-rsoc.5gzorro.smartcommunitylab.it
  role: "consumer"
  did:
    host: "http://zorro5g-identity-and-permissions-manager-consumer"
    port: "8000"
  lcm:
    host: "smart-contract-lifecycle-manager-consumer"
    port: "8087"
    offerPath: "/product-offer/"
    orderPath: "/product_order/"
    issuePath: "/spectoken/derivative/issue"
    slaPath: "/api/v1/service-level-agreement/"
    skipPost: "false"
  srsd:
    host: "zorro5g-smart-resource-and-service-discovery-consumer"
    port: "5000"
    requestPath: "/classifyOffer"
    skipPost: "false"
  hostname: "resource-and-service-offer-catalog-consumer"

gui-admin:
  enabled: true
  ingress:
    enabled: true
    className: "nginx"
    annotations: 
      #cert-manager.io/cluster-issuer: letsencrypt-prod
      helm.sh/resource-policy: keep
    hosts:
      - host: admin-gui.5gzorro.smartcommunitylab.it
        paths:
          - path: /
            pathType: Prefix
    tls: 
     - secretName: 5gzorro-wildcard-cert #admin-gui-letsencrypt-tls
       hosts:
         - admin-gui.5gzorro.smartcommunitylab.it
  role: "admin"
  marketPlaceUrl: 'https://admin-rsoc.5gzorro.smartcommunitylab.it/tmf-api'
  legalProseUrl: 'https://admin-lpr.5gzorro.smartcommunitylab.it'
  governanceUrl: 'https://admin-gm.5gzorro.smartcommunitylab.it'
  identityPermissionsUrl: 'https://admin-idp.5gzorro.smartcommunitylab.it'
  smartContractUrl: 'https://admin-sclm.5gzorro.smartcommunitylab.it/smart-contract-lifecycle-manager/'
  resourceManagerEndpoint: 'http://172.28.3.15:31081'
  resourceManagerDiscoveryApiKey: 'ce0b0017-843c-4811-bb76-1005733cf3ec'
  resourceManagerTraslatorApiKey: 'fe6d588b-1d6b-4954-9e26-a334d0d09eed'
  rappDiscoveryApiKey: 'fc7def3f-0490-4c17-931f-6f6e4c759890'
  sliceDiscoveryApiKey: '685be7dc-6ed3-46de-90da-bc21747568a1'
  ledgerIdentity: 'CN=OperatorA,OU=DLT,O=DLT,L=London,C=GB'
  srsdUrl: 'https://admin-srsd.5gzorro.smartcommunitylab.it'
  issmUrl: 'http://172.28.3.15:30080'
  rappUrl: 'http://172.28.3.242:2626'

gui-regulator:
  enabled: true
  ingress:
    enabled: true
    className: "nginx"
    annotations: 
      #cert-manager.io/cluster-issuer: letsencrypt-prod
      helm.sh/resource-policy: keep
    hosts:
      - host: regulator-gui.5gzorro.smartcommunitylab.it
        paths:
          - path: /
            pathType: Prefix
    tls: 
     - secretName: 5gzorro-wildcard-cert #regulator-gui-letsencrypt-tls
       hosts:
         - regulator-gui.5gzorro.smartcommunitylab.it
  role: "regulator"
  marketPlaceUrl: 'https://regulator-rsoc.5gzorro.smartcommunitylab.it/tmf-api'
  legalProseUrl: 'https://regulator-lpr.5gzorro.smartcommunitylab.it'
  governanceUrl: 'https://regulator-gm.5gzorro.smartcommunitylab.it'
  identityPermissionsUrl: 'https://regulator-idp.5gzorro.smartcommunitylab.it'
  smartContractUrl: 'https://regulator-sclm.5gzorro.smartcommunitylab.it/smart-contract-lifecycle-manager/'
  resourceManagerEndpoint: 'http://172.28.3.15:31081'
  resourceManagerDiscoveryApiKey: 'ce0b0017-843c-4811-bb76-1005733cf3ec'
  resourceManagerTraslatorApiKey: 'fe6d588b-1d6b-4954-9e26-a334d0d09eed'
  rappDiscoveryApiKey: 'fc7def3f-0490-4c17-931f-6f6e4c759890'
  sliceDiscoveryApiKey: '685be7dc-6ed3-46de-90da-bc21747568a1'
  ledgerIdentity: 'O=Regulator,L=New York,C=US'
  srsdUrl: 'https://regulator-srsd.5gzorro.smartcommunitylab.it'
  issmUrl: 'http://172.28.3.15:30080'
  rappUrl: 'http://172.28.3.242:2626'

gui-consumer:
  enabled: true
  ingress:
    enabled: true
    className: "nginx"
    annotations: 
      #cert-manager.io/cluster-issuer: letsencrypt-prod
      helm.sh/resource-policy: keep
    hosts:
      - host: consumer-gui.5gzorro.smartcommunitylab.it
        paths:
          - path: /
            pathType: Prefix
    tls: 
     - secretName: 5gzorro-wildcard-cert #consumer-gui-letsencrypt-tls
       hosts:
         - consumer-gui.5gzorro.smartcommunitylab.it
  role: "consumer"
  marketPlaceUrl: 'https://consumer-rsoc.5gzorro.smartcommunitylab.it/tmf-api'
  legalProseUrl: 'https://consumer-lpr.5gzorro.smartcommunitylab.it'
  governanceUrl: 'https://consumer-gm.5gzorro.smartcommunitylab.it'
  identityPermissionsUrl: 'https://consumer-idp.5gzorro.smartcommunitylab.it'
  smartContractUrl: 'https://consumer-sclm.5gzorro.smartcommunitylab.it/smart-contract-lifecycle-manager/'
  resourceManagerEndpoint: 'http://172.28.3.15:31081'
  resourceManagerDiscoveryApiKey: 'ce0b0017-843c-4811-bb76-1005733cf3ec'
  resourceManagerTraslatorApiKey: 'fe6d588b-1d6b-4954-9e26-a334d0d09eed'
  rappDiscoveryApiKey: 'fc7def3f-0490-4c17-931f-6f6e4c759890'
  sliceDiscoveryApiKey: '685be7dc-6ed3-46de-90da-bc21747568a1'
  ledgerIdentity: 'CN=OperatorB,OU=DLT,O=DLT2,L=London,C=GB'
  srsdUrl: 'https://consumer-srsd.5gzorro.smartcommunitylab.it'
  issmUrl: 'http://172.28.3.15:30080'
  rappUrl: 'http://172.28.3.242:2626'


gui-trader:
  enabled: true
  ingress:
    enabled: true
    className: "nginx"
    annotations: 
      #cert-manager.io/cluster-issuer: letsencrypt-prod
      helm.sh/resource-policy: keep
    hosts:
      - host: trader-gui.5gzorro.smartcommunitylab.it
        paths:
          - path: /
            pathType: Prefix
    tls: 
     - secretName: 5gzorro-wildcard-cert #trader-gui-letsencrypt-tls
       hosts:
         - trader-gui.5gzorro.smartcommunitylab.it
  role: "trader"
  marketPlaceUrl: 'https://trader-rsoc.5gzorro.smartcommunitylab.it/tmf-api'
  legalProseUrl: 'https://trader-lpr.5gzorro.smartcommunitylab.it'
  governanceUrl: 'https://trader-gm.5gzorro.smartcommunitylab.it'
  identityPermissionsUrl: 'https://trader-idp.5gzorro.smartcommunitylab.it'
  smartContractUrl: 'https://trader-sclm.5gzorro.smartcommunitylab.it/smart-contract-lifecycle-manager/'
  resourceManagerEndpoint: 'http://172.28.3.15:31081'
  resourceManagerDiscoveryApiKey: 'ce0b0017-843c-4811-bb76-1005733cf3ec'
  resourceManagerTraslatorApiKey: 'fe6d588b-1d6b-4954-9e26-a334d0d09eed'
  rappDiscoveryApiKey: 'fc7def3f-0490-4c17-931f-6f6e4c759890'
  sliceDiscoveryApiKey: '685be7dc-6ed3-46de-90da-bc21747568a1'
  ledgerIdentity: 'CN=OperatorC,OU=DLT,O=DLT2,L=London,C=GB'
  srsdUrl: 'https://trader-srsd.5gzorro.smartcommunitylab.it'
  issmUrl: 'http://172.28.3.15:30080'
  rappUrl: 'http://172.28.3.242:2626'

smart-resource-and-service-discovery-admin:
  enabled: true
  ingress:
    enabled: true
    className: "nginx"
    annotations: 
      #cert-manager.io/cluster-issuer: letsencrypt-prod
      helm.sh/resource-policy: keep
    hosts:
      - host: admin-srsd.5gzorro.smartcommunitylab.it
        paths:
          - path: /
            pathType: Prefix
    tls: 
     - secretName: 5gzorro-wildcard-cert #admin-srsd-letsencrypt-tls
       hosts:
         - admin-srsd.5gzorro.smartcommunitylab.it
  mongo:
    uri: "mongodb-srsd-admin-admin-srsd"

smart-resource-and-service-discovery-regulator:
  enabled: true
  ingress:
    enabled: true
    className: "nginx"
    annotations: 
      #cert-manager.io/cluster-issuer: letsencrypt-prod
      helm.sh/resource-policy: keep
    hosts:
      - host: regulator-srsd.5gzorro.smartcommunitylab.it
        paths:
          - path: /
            pathType: Prefix
    tls: 
     - secretName: 5gzorro-wildcard-cert #regulator-srsd-letsencrypt-tls
       hosts:
         - regulator-srsd.5gzorro.smartcommunitylab.it
  mongo:
    uri: "mongodb-srsd-regulator-admin-srsd"

smart-resource-and-service-discovery-trader:
  enabled: true
  ingress:
    enabled: true
    className: "nginx"
    annotations: 
      #cert-manager.io/cluster-issuer: letsencrypt-prod
      helm.sh/resource-policy: keep
    hosts:
      - host: trader-srsd.5gzorro.smartcommunitylab.it
        paths:
          - path: /
            pathType: Prefix
    tls: 
     - secretName: 5gzorro-wildcard-cert #trader-srsd-letsencrypt-tls
       hosts:
         - trader-srsd.5gzorro.smartcommunitylab.it
  mongo:
    uri: "mongodb-srsd-trader-admin-srsd"

smart-resource-and-service-discovery-consumer:
  enabled: true
  ingress:
    enabled: true
    className: "nginx"
    annotations: 
      #cert-manager.io/cluster-issuer: letsencrypt-prod
      helm.sh/resource-policy: keep
    hosts:
      - host: consumer-srsd.5gzorro.smartcommunitylab.it
        paths:
          - path: /
            pathType: Prefix
    tls: 
     - secretName: 5gzorro-wildcard-cert #consumer-srsd-letsencrypt-tls
       hosts:
         - consumer-srsd.5gzorro.smartcommunitylab.it
  mongo:
    uri: "mongodb-srsd-consumer-admin-srsd"