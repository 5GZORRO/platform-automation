loki:
  enabled: true
  isDefault: true

  persistence:
    enabled: true
    accessModes:
    - ReadWriteOnce
    size: 32Gi
    annotations: {}
    subPath: "loki"
    storageClassName: managed-premium
  
  serviceMonitor:
    enabled: false
    interval: ""
    additionalLabels: {}
    annotations: {}
    # scrapeTimeout: 10s
    # path: /metrics
    prometheusRule:
      enabled: false
      additionalLabels: {}
      rules: 
      #  Some examples from https://awesome-prometheus-alerts.grep.to/rules.html#loki
       - alert: LokiProcessTooManyRestarts
         expr: changes(process_start_time_seconds{job=~"loki"}[15m]) > 2
         for: 0m
         labels:
           severity: warning
         annotations:
           summary: Loki process too many restarts (instance {{ $labels.instance }})
           description: "A loki process had too many restarts (target {{ $labels.instance }})\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
       - alert: LokiRequestErrors
         expr: 100 * sum(rate(loki_request_duration_seconds_count{status_code=~"5.."}[1m])) by (namespace, job, route) / sum(rate(loki_request_duration_seconds_count[1m])) by (namespace, job, route) > 10
         for: 15m
         labels:
           severity: critical
         annotations:
           summary: Loki request errors (instance {{ $labels.instance }})
           description: "The {{ $labels.job }} and {{ $labels.route }} are experiencing errors\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
       - alert: LokiRequestPanic
         expr: sum(increase(loki_panic_total[10m])) by (namespace, job) > 0
         for: 5m
         labels:
           severity: critical
         annotations:
           summary: Loki request panic (instance {{ $labels.instance }})
           description: "The {{ $labels.job }} is experiencing {{ printf \"%.2f\" $value }}% increase of panics\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
       - alert: LokiRequestLatency
         expr: (histogram_quantile(0.99, sum(rate(loki_request_duration_seconds_bucket{route!~"(?i).*tail.*"}[5m])) by (le)))  > 1
         for: 5m
         labels:
           severity: critical
         annotations:
           summary: Loki request latency (instance {{ $labels.instance }})
           description: "The {{ $labels.job }} {{ $labels.route }} is experiencing {{ printf \"%.2f\" $value }}s 99th percentile latency\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"

promtail:
  enabled: true
  config:
    lokiAddress: http://{{ .Release.Name }}:3100/loki/api/v1/push
  serviceMonitor:
    enabled: false
    
fluent-bit:
  enabled: false

grafana:
  enabled: false
  sidecar:
    datasources:
      enabled: true
      maxLines: 1000
  image:
    tag: 8.3.5

prometheus:
  enabled: false
  isDefault: false

filebeat:
  enabled: false
  filebeatConfig:
    filebeat.yml: |
      # logging.level: debug
      filebeat.inputs:
      - type: container
        paths:
          - /var/log/containers/*.log
        processors:
        - add_kubernetes_metadata:
            host: ${NODE_NAME}
            matchers:
            - logs_path:
                logs_path: "/var/log/containers/"
      output.logstash:
        hosts: ["logstash-loki:5044"]

logstash:
  enabled: false
  image: grafana/logstash-output-loki
  imageTag: 1.0.1
  filters:
    main: |-
      filter {
        if [kubernetes] {
          mutate {
            add_field => {
              "container_name" => "%{[kubernetes][container][name]}"
              "namespace" => "%{[kubernetes][namespace]}"
              "pod" => "%{[kubernetes][pod][name]}"
            }
            replace => { "host" => "%{[kubernetes][node][name]}"}
          }
        }
        mutate {
          remove_field => ["tags"]
        }
      }
  outputs:
    main: |-
      output {
        loki {
          url => "http://loki:3100/loki/api/v1/push"
          #username => "test"
          #password => "test"
        }
        # stdout { codec => rubydebug }
      }
