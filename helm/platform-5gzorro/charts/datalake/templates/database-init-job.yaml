apiVersion: batch/v1
kind: Job
metadata:
  name: datalake-database-init
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation,hook-failed
    "helm.sh/hook-weight": "3"
  labels:
    app.kubernetes.io/name: {{ include "platform-5gzorro.name" . }}
    app.kubernetes.io/part-of: {{ .Release.Name }}
    helm.sh/chart: {{ include "platform-5gzorro.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  template:
    metadata:
      name: datalake-database-init
      labels:
        app.kubernetes.io/name: {{ include "platform-5gzorro.name" . }}
        app.kubernetes.io/part-of: {{ .Release.Name }}
        helm.sh/chart: {{ include "platform-5gzorro.chart" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
    spec:
      {{- with (default .Values.global.imagePullSecrets .Values.imagePullSecrets) }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "datalake.serviceAccountName" . }}
      initContainers: 
        - name: wait-psql
          image: "postgres:14"
          command: ["/bin/sh"]
          args: ["-c", "until pg_isready -h ${POSTGRES_HOST} -p ${POSTGRES_PORT} -U ${POSTGRES_USER}; do echo 'Waiting for postgres'; sleep 2; done"]
          env:
            - name: POSTGRES_HOST
              value: {{ .Values.postgres.host }}
            - name: POSTGRES_PORT
              value: "{{ .Values.postgres.port }}"
            - name: POSTGRES_USER
              valueFrom:
                  secretKeyRef:
                  {{- if .Values.postgres.existingSecret }}
                    name: {{ .Values.postgres.existingSecret }}
                    key: {{ .Values.postgres.userKey }}
                  {{- else }}
                      name: datalake-db-credentials
                      key: username
                  {{- end }}
            - name: POSTGRES_PASSWORD
              valueFrom:
                  secretKeyRef:
                  {{- if .Values.postgres.existingSecret }}
                    name: {{ .Values.postgres.existingSecret }}
                    key: {{ .Values.postgres.passwordKey }}
                  {{- else }}
                      name: datalake-db-credentials
                      key: password
                  {{- end }}
            - name: PGPASSWORD
              valueFrom:
                  secretKeyRef:
                  {{- if .Values.postgres.existingSecret }}
                    name: {{ .Values.postgres.existingSecret }}
                    key: {{ .Values.postgres.passwordKey }}
                  {{- else }}
                      name: datalake-db-credentials
                      key: password
                  {{- end }}
            - name: POSTGRES_DB
              value: {{ .Values.postgres.name }}
      containers:
        - name: delete-databases
          image: "postgres:14"
          command: ["/bin/sh"]
          args: ["-c", "psql -h ${POSTGRES_HOST} -p ${POSTGRES_PORT} -U ${POSTGRES_USER} -d ${POSTGRES_DB} -c 'CREATE TABLE datalake_metrics(seq_id SERIAL PRIMARY KEY, resourceID VARCHAR, referenceID VARCHAR, transactionID VARCHAR, productID VARCHAR, instanceID VARCHAR, metricName VARCHAR, metricValue VARCHAR, timestamp VARCHAR, storageLocation VARCHAR);'"]
          env:
            - name: POSTGRES_HOST
              value: {{ .Values.postgres.host }}
            - name: POSTGRES_PORT
              value: "{{ .Values.postgres.port }}"
            - name: POSTGRES_USER
              valueFrom:
                  secretKeyRef:
                  {{- if .Values.postgres.existingSecret }}
                    name: {{ .Values.postgres.existingSecret }}
                    key: {{ .Values.postgres.userKey }}
                  {{- else }}
                      name: datalake-db-credentials
                      key: username
                  {{- end }}
            - name: POSTGRES_PASSWORD
              valueFrom:
                  secretKeyRef:
                  {{- if .Values.postgres.existingSecret }}
                    name: {{ .Values.postgres.existingSecret }}
                    key: {{ .Values.postgres.passwordKey }}
                  {{- else }}
                      name: datalake-db-credentials
                      key: password
                  {{- end }}
            - name: PGPASSWORD
              valueFrom:
                  secretKeyRef:
                  {{- if .Values.postgres.existingSecret }}
                    name: {{ .Values.postgres.existingSecret }}
                    key: {{ .Values.postgres.passwordKey }}
                  {{- else }}
                      name: datalake-db-credentials
                      key: password
                  {{- end }}
            - name: POSTGRES_DB
              value: {{ .Values.postgres.name }}
      restartPolicy: OnFailure